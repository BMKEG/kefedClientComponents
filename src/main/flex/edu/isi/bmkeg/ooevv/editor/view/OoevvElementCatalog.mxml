<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:view="edu.isi.bmkeg.ooevv.view.*" 
		 xmlns:utils="edu.isi.bmkeg.utils.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 skinClass="edu.isi.bmkeg.ooevv.editor.view.OoevvElementCatalogSkin"
		 width="100%"
		 height="100%">

	<s:layout>
		<s:VerticalLayout gap="6" paddingLeft="10" verticalAlign="middle"/>
	</s:layout>
	
	<fx:Style>
		.inactive {
			color: #CCCCCC;
		}
		.active {
			color: #333333;
		}		
	</fx:Style>
	
	<fx:Declarations>
		<s:AsyncListView id="asyncListView" list="{elements}" createPendingItemFunction="createPendingItem"/>
	</fx:Declarations>

	<fx:Metadata>
		[SkinState("loading")]
		[SkinState("normal")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			import edu.isi.bmkeg.ooevv.editor.OoevvEditorContext;
			import edu.isi.bmkeg.ooevv.events.*;
			import edu.isi.bmkeg.ooevv.events.catalog.*;
			import edu.isi.bmkeg.ooevv.model.*;
			import edu.isi.bmkeg.ooevv.model.scale.*;
			import edu.isi.bmkeg.vpdmf.model.instances.LightViewInstance;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.collections.errors.ItemPendingError;
			import mx.core.IVisualElementContainer;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.states.SetStyle;
			import mx.states.State;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
		
			private var __interval:int = 0;
			
			[Bindable]
			public var listLength:int;
			
			private var _elements:IList;
			
			[Bindable]
			public function get elements():IList
			{
				return _elements;
			}
			
			public function set elements(v:IList):void
			{
				_elements = v;
			}
			
			
			public static const VIEW_MODE_LOADING:String="loading";
			public static const VIEW_MODE_NORMAL:String="normal";

			
			private var _viewMode:String = VIEW_MODE_NORMAL;
			
			protected function set viewMode(value:String):void
			{
				_viewMode = value;
				invalidateSkinState(); // this forces a call to getCurrentSkinState
			}
			
			public function turnOnLoadingIndicator():void
			{
				viewMode = VIEW_MODE_LOADING;
			}
			
			public function turnOffLoadingIndicator():void
			{
				viewMode = VIEW_MODE_NORMAL;
			}
			
			override protected function getCurrentSkinState():String
			{
				// this forces a change in skinstate
				return _viewMode;
			}
									
			protected function elList_selectionChangeHandler(event:GridSelectionEvent):void
			{

				if(this._viewMode != VIEW_MODE_NORMAL) {
					return;
				}
				// TODO Auto-generated method stub
				var i:int = elList.selectedIndex;
				if( i != -1 ) {
					var el:OoevvElement = OoevvElement(elements.getItemAt(i));
					var uid:Number = el.vpdmfId;
					this.dispatchEvent( new SelectOoevvElementEvent(uid) );
				}
			}
			
			private function createPendingItem(index:int, ipe:ItemPendingError):Object {
				
				return {title: "..."};        
				
			}
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// OoevvElementSet Combo functions
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			
			public function myLabelFunc(item:Object):String {
				var lvi:LightViewInstance = LightViewInstance(item);
				
				if( lvi == null )
					return "";
				
				return lvi.vpdmfLabel; 
			}
			
			protected function handle_ooevvElementSetComboChange(event:IndexChangeEvent):void
			{
				selectOoevvElementSet();
			}
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// Handle execution of control to run OoevvElementSet 
			// queries through a single control.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			
			/**
			 * Runs the selection event for the OoevvElementSet
			 * by selecting the state from the current controls. 
			 */
			protected function selectOoevvElementSet():void
			{
				var i:int = ooevvElementSetCombo.selectedIndex;
				
				if( i < 0 ) 
					return; 
				
				var lvi:LightViewInstance = 
					LightViewInstance(ooevvElementSetCombo.dataProvider.getItemAt(i));
				var vpdmfId:Number = lvi.vpdmfId;
				
				var oeTypeCode:int = 0;
				if( ooevvTypeSelect_protEnt.selected ) {
					oeTypeCode = 1;
				} else if( ooevvTypeSelect_variable.selected ) {
					oeTypeCode = 2;					
				}
				
				var filter:String = ooevvTypeFilter.text;
				
				this.dispatchEvent( new SelectOoevvElementSetEvent(vpdmfId, oeTypeCode, ooevvTypeFilter.text) );
				
			}
			
			protected function handle_ooevvTypeSelect():void {
				
				selectOoevvElementSet();
				
			}

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// search box functions
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			private function onKeyDown( e:KeyboardEvent ):void
			{
				__interval = 0;
			}
			
			private function onKeyUp( e:KeyboardEvent ):void
			{
				if( TextInput(e.currentTarget).text.length != 0 )
				{
			//		__interval = setTimeout(query, 100);
				}
			}
			
			private function onFocusIn( e:FocusEvent ):void
			{
				var target:TextInput = e.currentTarget as TextInput;
				if( target.text == "-- Filter --" ) {
					target.text = "";
					target.styleName = "active";
				}
			}
			
			private function onFocusOut( e:FocusEvent ):void
			{
				var target:TextInput = e.currentTarget as TextInput;
				if( target.text == "" ) {
					target.text = "-- Filter -";
					target.styleName = "inactive";
				}
			}
			
			//~~~~~~~~~~~~~~~~~~~~
			// formatting for grid
			//~~~~~~~~~~~~~~~~~~~~
			private function typeLabelFunktion(item:Object, column:DataGridColumn):String {

				if(item.viewType == "OoevvProcess")
					return "Process";
				else if( item.viewType == "OoevvEntity" ) 
					return "Entity";
				else if( item.viewType == "ExperimentalVariable") 
					return "Variable";
			
				return "";
				
			}
						
		]]>
	</fx:Script>
			
	<s:states>
		<s:State name="normal" />  
		<s:State name="disabled" />  
		
		<!-- modal state to disable control  -->
		<s:State name="loading"/>
	</s:states>

	<s:Group top="10" width="100%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<s:ComboBox id="ooevvElementSetCombo" width="96%"
					change="handle_ooevvElementSetComboChange(event)"
					labelFunction="myLabelFunc" />
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:RadioButton id="ooevvTypeSelect_all" left="5" right="5"
						   click="handle_ooevvTypeSelect()"
						   label="All"/>
			<s:RadioButton id="ooevvTypeSelect_protEnt" left="5" right="5" 
						  	click="handle_ooevvTypeSelect()"
							label="Processes and Entities"/>
			<s:RadioButton id="ooevvTypeSelect_variable" left="5" right="5" 
						   click="handle_ooevvTypeSelect()"
						   label="Variables"/>
		</s:Group>
		<s:TextInput id="ooevvTypeFilter" width="98%" 
					text="Search"
				 	initialize="ooevvTypeFilter.styleName = 'inactive'"
					focusIn="onFocusIn( event )"
					focusOut="onFocusOut( event )"
					keyDown="onKeyDown( event )"
					keyUp="onKeyUp( event )"/>
	</s:Group>
				
	<mx:DataGrid id="elList" width="98%" height="98%"
	 				dataProvider="{asyncListView}"
					dragEnabled="true">
			<mx:columns> 
				<mx:DataGridColumn id="typeColumn" 
								   width="75"
								   labelFunction="typeLabelFunktion" 
								   headerText="Type"/> 
				<mx:DataGridColumn id="nameColumn" 
								   dataField="vpdmfLabel" 
								   headerText="Name"/> 
			</mx:columns> 
	</mx:DataGrid>
	
</s:Panel>
