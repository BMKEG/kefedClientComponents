<?xml version="1.0"?>
<!-- $Id: SpreadsheetComponent.mxml 50 2011-06-09 22:55:52Z taruss2000@gmail.com $ 
     $Date: 2011-06-09 15:55:52 -0700 (Thu, 09 Jun 2011) $
     $Revision: 50 $ -->
<!--
/**
 *  Latest information on this project can be found at http://www.rogue-development.com/spreadsheet/
 * 
 *  Copyright (c) 2008 Marc Hughes 
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the Software 
 *  is furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 *  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 *  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
 *
 * Description:
 *    A datagrid like component focused on data input and extensibility.
 * 
 **/
 This provides one example usage of the Spreadsheet component.
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:sp="com.roguedevelopment.spreadsheet.*" 	
	xmlns:kapit="fr.kapit.*" 
    xmlns:components="fr.kapit.components.*" 
    xmlns:diagctl="com.kapit.diagram.controls.*" 
    xmlns:diagview="com.kapit.diagram.view.*"
   	xmlns:kapit1="edu.isi.bmkeg.kefed.v0.ui.kapit.*"	
	xmlns:ui="edu.isi.bmkeg.kefed.v0.ui.*"               
	preinitialize="preinit()">
	
	<mx:Script>
	<![CDATA[
		import edu.isi.bmkeg.utils.DataUtil;
		import mx.charts.chartClasses.DataTip;
		import mx.charts.HitData;
		import mx.utils.ArrayUtil;
		import edu.isi.bmkeg.utils.powerloom.PLExporter;
		import mx.utils.ObjectUtil;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.core.ScrollPolicy;
		import edu.isi.bmkeg.kefed.v0.elements.KefedFieldTemplate;
		import edu.isi.bmkeg.kefed.v0.elements.KefedBaseValueTemplate;
		import edu.isi.bmkeg.kefed.v0.elements.KefedFullValueTemplate;
		import edu.isi.bmkeg.kefed.v0.elements.KefedExperiment;
		import edu.isi.bmkeg.kefed.v0.ui.UiUtil;
		import edu.isi.bmkeg.kefed.v0.ui.ComplexDataGridColumn;
		import mx.events.ListEvent;
		import flare.vis.events.SelectionEvent;
		import edu.isi.bmkeg.kefed.v0.ui.kapit.DiagramMappings;
		import mx.managers.PopUpManager;
		import mx.utils.StringUtil;
	    import com.kapit.diagram.DiagramEvent;
		import com.kapit.diagram.layouts.utils.Constants;            
        import com.kapit.diagram.library.SVGAssetLibrary;
        import com.kapit.diagram.model.DiagramModel;
		import com.kapit.diagram.proxies.DiagramProxy;
        import com.kapit.diagram.proxies.KDLProxy;
		import com.kapit.diagram.view.DiagramObject;
		import com.kapit.diagram.view.DiagramSprite;
		import com.kapit.diagram.view.DiagramView;

		import mx.core.Application;
		import flash.events.MouseEvent;
		import mx.rpc.events.FaultEvent;
		
		import mx.controls.TextInput;
		import mx.controls.sliderClasses.Slider;		
		import mx.controls.Alert;

		import mx.events.SliderEvent;
		import mx.events.DataGridEvent;

		import edu.isi.bmkeg.kefed.v0.elements.KefedObject;
		import edu.isi.bmkeg.kefed.v0.elements.KefedModel;
		import edu.isi.bmkeg.kefed.v0.elements.KefedPersevereEvent;
		import edu.isi.bmkeg.kefed.v0.elements.KefedPersevereInterface;
		import edu.isi.bmkeg.kefed.v0.ui.kapit.KefedLinkProxy;
		import edu.isi.bmkeg.kefed.v0.ui.kapit.KefedObjectProxy;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryCheckBoxFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryComboFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryEditorFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryLongEditorFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryRelativeRegionFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataEntryUnitsFactory;
		import edu.isi.bmkeg.kefed.v0.ui.DataGridComboBox
		import edu.isi.bmkeg.kefed.v0.ui.TextDisplayDialog;

		import mx.collections.ArrayCollection;
		
		import edu.isi.bmkeg.kefed.v0.app.KefedAppEvent;
	
		[Bindable]
		protected var dataTable:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var variableType:KefedFullValueTemplate = null;
	
		[Bindable]
		protected var activeVb:KefedObject;
	
		[Bindable]
		protected var model:KefedExperiment = new KefedExperiment();

		[Bindable]
		protected var depVbs:ArrayCollection = new ArrayCollection();

		[Bindable]
		protected var indepVbs:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var cntrlVbs:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		public var saveAllowed:Boolean = true;
		
	    private var _proxy:DiagramProxy;

		public function initDiagram():void {
            _proxy = new KDLProxy(diagram);
            diagram.multipanel=false;
            diagram.selectionenabled=true;
            diagram.keyboardenabled=false;
            diagram.dragenabled=false;
            diagram.dropenabled=false;
            var sprites:Array = [];
	
			var diagModel:DiagramModel = new DiagramModel(DiagramMappings.getDiagramMappings());
			
			diagram.model = diagModel;

			if( diagram != null && _proxy != null) {

				diagram.addEventListener(DiagramEvent.SELECTION_CHANGED,
							handleDiagramSelectionChanged);
	
	            _proxy.importGraph();
	            _proxy.exportGraph(Constants.RADIAL_LAYOUT);
	
            }    

			this.loadModel(this.model);

        }
        
		public function loadModel(model:KefedExperiment):void {
        	
            this.model = model;
			this.depVbs = DataUtil.sortCollectionAlphabetically(model.getMeasurements(), "nameValue", false);
			this.indepVbs = DataUtil.sortCollectionAlphabetically(model.getParameters(), "nameValue", false);
			this.cntrlVbs = DataUtil.sortCollectionAlphabetically(model.getConstants(), "nameValue", false);
			
			// Hack: loading the model the 2nd time triggers the 
			// editing updates when you load the diagram from XML
			// Having this temporary model that gets edited by 
			// the update and then discarded fixes the problem
			var tempModel:KefedModel = new KefedModel();
			KefedObjectProxy._graph = tempModel;
			KefedLinkProxy._graph = tempModel;
			
			if( diagram != null && _proxy != null) {

				this.diagram.fromXML(model.diagramXML);
				_proxy.importGraph()
	            
	            zoomControl.setZoom(0.5);
           }    
			
			KefedObjectProxy._graph = model;
			KefedLinkProxy._graph = model;
			
			diagram.deselectAll();			
        }
       
       
  
	/* Generate the PowerLoom string for the data in this model and 
	   show it in a dialog box. */	
	public function showModelPowerLoom(event:MouseEvent):void {
			var d:TextDisplayDialog = new TextDisplayDialog();
			d.title="PowerLoom Representation";
			d.displayText=PLExporter.generateExperimentDataAssertion(model, true);
			PopUpManager.addPopUp(d, this);
		}
		
		public function saveCurrentModel(event:MouseEvent):void {
	        var diagramXml:XML = diagram.toXML();
			model.diagramXML = diagramXml;
			model.modelName = modelName.text;
			model.source = modelSource.text;
			model.citeKey = modelCitation.text;
			if( Application.application.eventDispatcher != null ) {
				Application.application.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.SAVE_DATA_EDIT, model);
				currentState = "";
				Application.application.currentState = "Dashboard_State";
			}
		}

		public function cancelSave(event:MouseEvent):void {
			if( Application.application.eventDispatcher != null ) {
				Application.application.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.CANCEL_DATA_EDIT);
				currentState = "";
				Application.application.currentState = "Dashboard_State";
			}
		}
		
		
		/** Lookup the element UID for the list, and if found, then select the 
		 *  element in the grid and go to the new state and return true.
		 *  If an element with uid is not in the elementList, then
		 *  do nothing and return false.
		 * 
		 * @param uid The UID to lookup in the elementList
		 * @param elementList List of elements to check
		 * @param grid DataGrid that displays the elements from elementList
		 * @param newState The state to enter if the element is found.
		 * @returns true if the element is found, otherwise false.
		 */
		private function lookupElementInList(uid:String,
		  									 elementList:ArrayCollection,
		  									 grid:List,
		  									 newState:String):Boolean {
			for(var i:int=0;i<elementList.length;i++) {
				if (elementList[i].uid == uid) {         
					grid.selectedIndex = i;
		 			selectElementInGrid(grid, elementList, newState);
					return true;	
				}
			}
			return false;			
		}
		
		/** Handle selection changes from the diagram.  This is the main
		 *  selection change handling routine.  Selection changes from the
		 *  lists of variables will indirectly call this by arranging to 
		 *  change the diagram selection when the list selection changes.
		 * 
		 *  That will trigger this routine to be called by the diagram code.
		 */
		private function handleDiagramSelectionChanged(e:Event):void
		{
			var arr:Array=diagram.getSelectedObjects();
			
			var uid:String = null;
			var type:String = null;
			var dObj:DiagramObject = null;
			if( arr && arr.length == 1 ) { 
				dObj = DiagramObject(arr[0]);
				uid = dObj.dataobjectid;
			}
			
			if(uid) {
				// Rather inefficient code that goes through each of the
				// variable arrays and tries to find out what type of
				// variable has been selected.  It then updates the selection
				// for the data part of the interface.
				if (lookupElementInList(uid, depVbs, depVbGrid, "MeasurementSpecification_State")) return;
				if (lookupElementInList(uid, indepVbs, indepVbGrid, "ParameterSpecification_State")) return;
				if (lookupElementInList(uid, cntrlVbs, cntrlVbGrid, "ConstantSpecification_State")) return;
			} 

			// If we got here, then no variable object was selected.
			// So we reset the lists to not have anything selected and then 
			// reset the state to the default state.
			indepVbGrid.selectedIndex = -1;
			cntrlVbGrid.selectedIndex = -1;			            
			depVbGrid.selectedIndex = -1;
			currentState = "";
		}
		
		protected function preinit() : void {
			if( Application.application.eventDispatcher != null ) {
				Application.application.eventDispatcher.
							addEventListener(KefedAppEvent.EDIT_DATA, loadModelEventListener);
			}
		}
		
		public function loadModelEventListener(event:KefedAppEvent):void {
			this.loadModel(event.activeModel as KefedExperiment);
		}
		
		private function selectDiagramElement(element:KefedObject):void {
            diagram.deselectAll();
            if (element) {
         		var uid:String = element.uid;
           		var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
	            diagram.selectObject(dob);
	        }
		}
		
		private function deselectNonMatchingList (current:List, target:List):void {
			if (current != target) target.selectedIndex = -1;
		}
		
		
		/** Handle the selection of an element in a grid.  This function takes
		 *  care of updating the other variable grids by deselecting any selections,
		 *  and it sets up the editing for either type editing (Control and Parameters)
		 *  or data editing (Measurements).
		 * 
		 *  Sets "activeVb" to be the currently selected variable, or null if there
		 *  is no selected variable.
		 *
		 * @param grid The selection grid that is being handled.
		 * @param variables Collection of the variables associated with the grid.
		 * @param newState The new editing state to enter if a variable is selected.
		 */
		 private function selectElementInGrid(grid:List,
											  variables:ArrayCollection,
											  newState:String):void {
			deselectNonMatchingList(grid, depVbGrid);
			deselectNonMatchingList(grid, indepVbGrid);
			deselectNonMatchingList(grid, cntrlVbGrid);
			
			if (grid.selectedIndex >= 0) {          
				activeVb = variables[grid.selectedIndex];
				if (activeVb.isMeasurement()) {
					buildMeasurementVariableDataGrid(activeVb, depVbData);
					if (model.experimentData[activeVb.uid] == null) {
						model.experimentData[activeVb.uid] = new ArrayCollection();
					}
					dataTable = model.experimentData[activeVb.uid];
				} else {
					variableType = activeVb.valueType;
				}
				currentState = newState;
			} else {
				activeVb = null;
				currentState = "";
			}
		}
		
		private function selectListElement(event:Event):void {
			var list:List = event.currentTarget as List;
			selectDiagramElement(list.selectedItem as KefedObject);
		}
		
		/** Builds the data grid for a measurement variable.
		 */		
		private function buildMeasurementVariableDataGrid(depV:KefedObject, depVbData:DataGrid):void {
            	
            if( !depV.isMeasurement() ) {
            	return;
            }	
            	
        	//
        	// Go back through graph and build pathways from all independent 
        	// variables and the current dependent variable.
        	// 
        	// TODO: Should this also pick up controlled variables and show
        	//       them in context?
        	var dependentVariableDataTable:ArrayCollection = depV.oldDataTable;
         	var dependOnsArray:ArrayCollection = model.getDependOnsForMeasurement(depV);
 			var cols:Array = new Array();
			
			// Make array for independent variables
        	for(var i:int=0; i<dependOnsArray.length; i++) {
        		createVariableDataRenderer(dependOnsArray[i] as KefedObject, cols);
        	}
 
        	// Now handle the Dependent variable structure as well.
        	createVariableDataRenderer(depV, cols);
 			
			depVbData.columns = cols;
        }
        
        /** Create a variable data renderer of the appropriate type and
        *   stores it into the column array.
        * 
        * @param variable The variable object
        * @param renderers Array for holding the data renderers.
        */
        private function createVariableDataRenderer(variable:KefedObject, renderers:Array):void {
        	var dgc:DataGridColumn;
        	
           	if (variable.valueType.valueTypeName == "Table") {
        		for each (var field:KefedFieldTemplate in variable.valueType.multipleSlotFields) {
        			dgc = new ComplexDataGridColumn();
        			// Hack:  Include a space after the "." to allow the headerline
        			//        to word wrap at that position.
        			dgc.headerText = variable.nameValue + ". " + field.nameValue;
        			dgc.dataField = variable.uid + "." + field.uid;
        			dgc.headerWordWrap = true;
        			dgc.showDataTips = true;
					setupItemRendererForType(dgc, field.valueType);
					renderers.push(dgc);
        		}
        	} else {
        		dgc = new ComplexDataGridColumn();
        		dgc.headerText = variable.nameValue;
        		dgc.dataField = variable.uid;
       			dgc.showDataTips = true;
        		dgc.headerWordWrap = true;
				setupItemRendererForType(dgc, variable.valueType);
				renderers.push(dgc);	
        	}
        }
        
        /** Decides which data renderer is most appropriate for the type and
        *   template information that is stored for this item.  Then sets the
        *   DataGridColumn appropriately for handling that data renderer.
        * 
        * @param dgc The datagrid column to setup for the item
        * @param vTemplate The base value template for the item
         */
        private function setupItemRendererForType (dgc:DataGridColumn, vTemplate:KefedBaseValueTemplate):void {
        	if (vTemplate.valueTypeName == "True/False") {
				dgc.itemRenderer = new DataEntryCheckBoxFactory(vTemplate);
				dgc.editorDataField = "selected";
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Image"
        				|| vTemplate.valueTypeName == "File") {
        		dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
        		dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Date") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Time") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "DateTime") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Decimal with units") {
        		dgc.itemRenderer = new DataEntryUnitsFactory(vTemplate);
				dgc.editorDataField = "dataItem";
        		dgc.rendererIsEditor = true;
        		dgc.showDataTips = true;
        		dgc.dataTipFunction = unitsDataTipFunction;
			} else if (vTemplate.valueTypeName == "Region") {
				dgc.labelFunction = regionLabelFunction;
        		dgc.itemEditor = new DataEntryRelativeRegionFactory(vTemplate);
//        		var t:RelativeRegionEditor = dgc.itemEditor.newInstance() as RelativeRegionEditor;
//        		t.computeSize();
//        		trace("Editor=",t," h=",t.measuredHeight," w=",t.measuredWidth);
				dgc.editorDataField = "dataItem";
				dgc.editorHeightOffset = RelativeRegionEditor.EDITOR_HEIGHT_OFFSET;
				dgc.editorWidthOffset = RelativeRegionEditor.EDITOR_WIDTH_OFFSET;
        		dgc.rendererIsEditor = false;
        		dgc.dataTipFunction = regionDataTipFunction;
  			} else if (vTemplate.valueTypeName == "Text"
  						|| vTemplate.valueTypeName == "Decimal"
  						|| vTemplate.valueTypeName == "Integer") {
//  				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else if (vTemplate.valueTypeName == "Long Text") {
//				dgc.itemRenderer = new DataEntryLongEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.editorHeightOffset = RelativeRegionEditor.EDITOR_HEIGHT_OFFSET;
				dgc.editorWidthOffset = RelativeRegionEditor.EDITOR_WIDTH_OFFSET;
				dgc.itemEditor = new DataEntryLongEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else if (vTemplate.allowedValues.length > 0) {
//				dgc.itemRenderer = new DataEntryComboFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryComboFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else {
//				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			}
        }
        
        private function formatRegion(regionObject:Object):String {
        	if (regionObject) {
	        	var prefix:String = " ";
	        	var regions:String = "";
	         	for each (var rName:String in (regionObject.regions as Array)) {
	        		regions += prefix + rName;
	        		prefix = ", ";
	        	}
	        	return regionObject.relation + regions;
	        } else {
	        	return "";
	        }
        }
        
        private function regionLabelFunction(item:Object, col:DataGridColumn):String {
        	return formatRegion(getNestedValue(item, col.dataField));
         }
        
        private function regionDataTipFunction(data:Object):String {
        	return (data) ? formatRegion(data) : "";
        }
        
        private function unitsDataTipFunction(data:Object):String {
        	return (data) ? data.value + " " + data.units : "";
        }
        
        private function simpleDataTipFunction(data:Object):String {
        	return (data) ? data.toString() : "";
        }
        
        
        /** Follows a chain of fieldNames separated by "." characters.
		 *
		 * @param obj The object to operate on
		 * @param fieldName The fieldname to use for access
		 * @return The end value from following the chain
		 */
		private function getNestedValue(obj:*, fieldName:String):* {
			var dotIndex:int = fieldName.indexOf(".");
			if (obj == null || obj == undefined) {
				return obj;
			} else if (dotIndex == -1) {
				return obj[fieldName];
			} else {
				var first:String = fieldName.substring(0,dotIndex);
				var rest:String  = fieldName.substring(dotIndex+1);
				return getNestedValue(obj[first], rest);
			}
		}
		
		

	    public function buildDependentVariableSpreadSheet(depV:KefedObject):String {
	
			var ss:String = "";
	
	        if( depV == null || !depV.isMeasurement() ) {
	        	return ss;
	        }
	
			// TODO:  Should this also display the controlled variable values?
			var indepVbArray:ArrayCollection = this.model.getDependOnsForMeasurement(depV);
			var indepVbTupleProperties:Object = new Object();
			
			for( var i:int=0; i<indepVbArray.length; i++) {
				var indepVb1:KefedObject = KefedObject(indepVbArray[i]);
				indepVbTupleProperties[indepVb1.nameValue] = "";			
			}
			indepVbTupleProperties.value = "";	
	
			// First row sets the column names
			// TODO: Need to set the autoCompletionOptions.
			for( var j:int=0; j<indepVbArray.length; j++) {
				var indepVb2:KefedObject = KefedObject(indepVbArray[j]);
				if( j > 0 ) ss += "\t";
				ss += indepVb2.nameValue;
			}
			ss += "\t" + depV.nameValue + "\n";						
			return ss;
		}
		
        private function handleAddRowEditDependentVariableData():void {   	
            var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, null);
            ac.addItem(o);
			depVbData.selectedIndex = ac.length - 1;
            }
        
        private function handleCopySelectedRowEditDependentVariableData():void {
        	var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, depVbData.selectedItem);
        	ac.addItem(o);
 			depVbData.selectedIndex = ac.length - 1;
        }
        
        private function handleCopyLastRowEditDependentVariableData():void {
        	var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, ac.getItemAt(ac.length - 1));
        	ac.addItem(o);
 			depVbData.selectedIndex = ac.length - 1;
        }

        private function handleRemoveRowEditDependentVariableData():void {
			var dg:DataGrid = DataGrid(this.depVbData);
			var ac:ArrayCollection = ArrayCollection(dg.dataProvider);
            var i:int = dg.selectedIndex;
            if( i == -1 ) {
            	i = ac.length - 1;
            }
            ac.removeItemAt(i);
        }
        
         private function switchToSpreadsheet(): void {
        	if( this.activeVb.isMeasurement()) { 	
	        	this.spreadsheet.text = this.buildDependentVariableSpreadSheet(activeVb);
	        	currentState = "Spreadsheet_State";
	        }      	
        }
        
        private function switchFromSpreadsheet(): void {
        	if( this.activeVb.isMeasurement()) { 	
	        	currentState = "MeasurementSpecification_State";
			} else if( this.activeVb.isParameter()) { 	
	        	currentState = "ParameterSpecification_State";
			} else if( this.activeVb.isConstant()) { 	
	        	currentState = "ConstantSpecification_State";
   			} else {
   				currentState = '';
   			}
        }

	    // What does this function do?
		private function getVbNameHash(vb:KefedObject): Object {
			
			var vbNameHash:Object = new Object();        	
			if( this.activeVb.isMeasurement() ) {
				// TODO:  Does this need something similar for controlled variables?
				var indepVbArray:ArrayCollection = this.model.getParametersForMeasurement(activeVb);
	        	for(var i:int=0; i<indepVbArray.length; i++) {
	        		var indepVb:KefedObject = indepVbArray[i];
	        		vbNameHash[indepVb.nameValue] = i;
	        	}
	       		vbNameHash[activeVb.nameValue] = indepVbArray.length; 
	       	} else if( this.activeVb.isParameter() ) {
	       		vbNameHash[activeVb.nameValue] = 0; 
	        } else if( this.activeVb.isConstant() ) {
	       		vbNameHash[activeVb.nameValue] = 0; 
	       	}
	        
	        return vbNameHash;
	        
		}

		private function getErrorStrings(): String {
        	var ss:String = this.spreadsheet.text;
        	var re:RegExp = /[\n\r]/;
        	var lines:Array = ss.split(re);
        	var vbNames:Array = lines[0].split("\t");

			//
			// Build hash table to provide lookup for values in document
			//
			var vbNameHash:Object = this.getVbNameHash(this.activeVb);        	
			var ssWidth:int = 0;
			for (var field:* in vbNameHash ) {
				ssWidth++;
			}
	
        	// Check to make sure that the variable names are correct.
        	var error:String = "";
        	for(var i:int=0; i<vbNames.length; i++) {
        		var vbName:String = vbNames[i];
        		if( vbNameHash[vbName] == null ) {
        			error += "Variable " + vbName + " not found in design.\n";
        		}
        	}

        	for(i=1; i<lines.length; i++) {
        		var line:String = lines[i];
        		var row:Array = line.split("\t");
        		if( row.length != ssWidth ) {
        			error != "Row " + i + " is of incorrect length.\n";
        		}
        	}
        	
			return error;			
		}


        private function checkSpreadsheetData(): void {
 			var error:String = this.getErrorStrings();        	
        	if( error.length > 0 ) 
        		Alert.show(error);
         }

        private function loadSpreadsheetDataToGrid(): void {
        	var error:String = this.getErrorStrings();        	
        	if( error.length > 0 ) 
        		return;
        	
        	// Sneaky trick. Use a hash of hashes to load new data from 
        	// dependent variables columns into system
        	var vbNameHash:Object = getVbNameHash(this.activeVb);
			for (var field:* in vbNameHash ) {
				vbNameHash[field] = new Object();
			}        	
        	
        	var dt:ArrayCollection = activeVb.oldDataTable;
        	
        	var ss:String = this.spreadsheet.text;    

        	var re:RegExp = /[\n\r]/;
        	var lines:Array = ss.split(re);
        	var vbNames:Array = lines[0].split("\t");
        	
        	for(var i:int=1; i<lines.length; i++) {
        		var line:String = lines[i];
        		if(line.length == 0) {
        			continue;
        		}
        		var fields:Array = line.split("\t");
        		var row:Object = new Object();
        		 
        		for(var j:int=0; j<fields.length; j++) {
        			field = fields[j];
        			var fieldName:String = vbNames[j];
        			if( fieldName == activeVb.nameValue ) {
	        			row.value = field;	    				
        			} else {
        				row[fieldName] = field;
        				vbNameHash[fieldName][field] = -1;
        			}
        		}
        		dt.addItem(row);
        	}
        	
        	var indepVbArray:ArrayCollection = this.model.getParametersForMeasurement(activeVb);
	        for( i=0; i<indepVbArray.length; i++ ) {
				var indepVb:KefedObject = indepVbArray[i];
				var dataToAdd:ArrayCollection = new ArrayCollection();
				
				// existing data in the independent variable
				var lookup:Object = new Object();
				for(var k:int=0; k<indepVb.oldDataTable.length; k++){
					lookup[indepVb.oldDataTable[k].value] = -1;
				}
					
        		for (var v:* in vbNameHash[indepVb.nameValue] ) {
					if( lookup[v] == null ) {
						var o:Object = new Object();
						o.value = v;
						indepVb.oldDataTable.addItem(o);		
					}
				}     	
	        }
        	this.switchFromSpreadsheet();
        }
       		
        
        private function doDebug(event:Event):void {
        	return;
        }
			
			public function faultHandler(event:FaultEvent):void {
				Alert.show(event.fault.faultString + "\n" + event.fault.faultDetail, "Error");
			}
		
		]]>
	</mx:Script>
	
	<mx:Style>
         .rightBold {
            fontWeight: bold;
            textAlign: right;
        }
        
        .centerBold {
        	fontWeight: bold;
        	textAlign: center;
        }
        
        .leftBold {
        	fontWeight: bold;
        	textAlign: left;
        }
    </mx:Style>
	
	<mx:states>
		<mx:State name="ConstantSpecification_State">
			<mx:RemoveChild target="{activeObjectForm}"/>
			<mx:AddChild relativeTo="{dataGrid}">
				<mx:VBox height="100%" width="100%">
					<ui:VariableTemplateTabs myObject="{activeVb}" diagram="{diagram}"
							monotonic="true" enabled="true"/>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="ParameterSpecification_State">
			<mx:RemoveChild target="{activeObjectForm}"/>
			<mx:AddChild relativeTo="{dataGrid}">
				<mx:VBox height="100%" width="100%">
					<ui:VariableTemplateTabs myObject="{activeVb}" diagram="{diagram}"
							monotonic="true" enabled="true"/>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="MeasurementSpecification_State">
			<mx:RemoveChild target="{activeObjectForm}"/>
			<mx:AddChild relativeTo="{dataGrid}" creationPolicy="all">
				<mx:VBox height="100%" width="100%">
					<mx:Text text="{activeVb.nameValue}" fontSize="14"/>
					<!-- Need to turn off sorting, because it doesn't work correctly when a
					     complex dotted sort field form is used in the DataGrid. 
					     TODO: Investigate whether AdvancedDataGrid solves this problem, or
					           perhaps if Flex 4 may have fixed it. -->
					<mx:DataGrid id="depVbData" 
								dataProvider="{dataTable}" 
								sortableColumns="false"
								width="100%" 
								height="100%" 
								editable="true"
								horizontalScrollPolicy="{ScrollPolicy.ON}"
								variableRowHeight="true"
								headerStyleName="leftBold"
								/>		<!-- itemEditEnd="handleEndEditEvent(event)" -->
					<mx:HBox width="100%">
						<mx:Button label="Add Row" 
								click="handleAddRowEditDependentVariableData()"/>
					    <mx:Button id ="CopySelectedDataRowButton"
					    		enabled="{depVbData.selectedIndex != -1}"
					    		label="Copy Row"
					    		click="handleCopySelectedRowEditDependentVariableData()"/>
					    <mx:Button id="CopyLastDataRowButton"
					    		enabled="{dataTable.length > 0}"
					    		label="Copy Last Row"
					    		click="handleCopyLastRowEditDependentVariableData()"/>
						<mx:Button id="RemoveDataRowButton"
							    label="Remove Row"
								enabled="{depVbData.selectedIndex != -1}"
								click="handleRemoveRowEditDependentVariableData()"/>
					</mx:HBox>
				</mx:VBox>		
			</mx:AddChild>
		</mx:State>
		<mx:State name="Spreadsheet_State">
			<mx:RemoveChild target="{activeObjectForm}"/>
			<mx:AddChild relativeTo="{dataGrid}">
				<mx:VBox height="100%" width="100%">
					<mx:TextArea id="spreadsheet" height="100%" width="100%"/> 
					<mx:HBox width="100%">
						<mx:Button label="Check Data" 
								click="checkSpreadsheetData()"/>
						<mx:Button label="Load to Grid"
								click="loadSpreadsheetDataToGrid()"/>
						<mx:Button label="Cancel Batch"
								click="switchFromSpreadsheet()"/>
					</mx:HBox>
				</mx:VBox>		
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:HDividedBox width="100%" height="100%">
	
		<mx:Panel id="flatPanel" width="40%" height="100%" title="{model.modelName}" 
					backgroundAlpha="{flatPanel.getStyle('borderAlpha')}" 
					backgroundColor="{flatPanel.getStyle('borderColor')}" >                
				
			<mx:HBox width="100%" height="30" verticalAlign="middle" >

				<mx:Text text="Zoom: "/>
				<kapit1:DiagramZoomHSlider id="zoomControl"
			        	minimum="0" maximum="1.7" value="0.5" diagram="{diagram}"/>
			</mx:HBox>
			<mx:HBox width="100%" height="100%" verticalAlign="middle" >
				<diagview:DiagramView width="100%" height="100%" id="diagram" creationComplete="initDiagram();"/>
			</mx:HBox>
		</mx:Panel>
		<mx:VBox height="100%" width="100%">
			<mx:HBox width="100%">
				<!-- <mx:Label text="Design:" fontSize="12"/> -->
				<mx:Label text="{model.type}" fontSize="18" />
				<mx:Spacer width="12"/>
				<mx:Label text="Name:" fontSize="12"/>
				<mx:TextInput id="modelName" text="{model.modelName}" fontSize="12" 
							  valueCommit="{model.modelName = modelName.text}"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>
			<mx:HBox  height="40" width="100%">
				<mx:Label text="Source:" fontSize="12"/>
				<mx:TextInput id="modelSource" text="{model.source}" fontSize="12"
							  valueCommit="{model.source = modelSource.text}"/>
				<mx:Label text="Citation Key:" fontSize="12"/>
				<mx:TextInput id="modelCitation" text="{model.citeKey}" fontSize="12"
							  valueCommit="{model.citeKey = modelCitation.text}"/>
				<mx:Spacer width="100%"/>
				<!-- <mx:Button label="Show PowerLoom" click="showModelPowerLoom(event)"/> -->
				<mx:Button label="Save Data" click="saveCurrentModel(event)" enabled="{saveAllowed}"/>
				<mx:Button label="Cancel" click="cancelSave(event)"/>
				<!-- <mx:Button label="Debug" click="doDebug(event)"/> -->
			</mx:HBox>
			
			<mx:VDividedBox width="100%" height="100%">
				<mx:HBox width="100%" height="30%">
					<mx:Panel id="cntrlVaribleList" width="33%" height="100%" 
							title="Constant Variables"
								backgroundAlpha="{indepVaribleList.getStyle('borderAlpha')}" 
								backgroundColor="{indepVaribleList.getStyle('borderColor')}">
						<mx:List id="cntrlVbGrid" 
								dataProvider="{cntrlVbs}"
								labelField="nameValue"
								width="100%" 
								height="100%" 
								click="selectListElement(event);"
								editable="false"/>
					</mx:Panel>	
				
					<mx:Panel id="indepVaribleList" width="33%" height="100%" 
							title="Parameter Variables"
								backgroundAlpha="{indepVaribleList.getStyle('borderAlpha')}" 
								backgroundColor="{indepVaribleList.getStyle('borderColor')}">
						<mx:List id="indepVbGrid" 
								dataProvider="{indepVbs}"
								labelField="nameValue"
								width="100%" 
								height="100%" 
								click="selectListElement(event);"
								editable="false"/>
					</mx:Panel>	
					
					<mx:Panel id="depVaribleList" width="33%" height="100%" 
							title="Measurement Variables"
								backgroundAlpha="{depVaribleList.getStyle('borderAlpha')}" 
								backgroundColor="{depVaribleList.getStyle('borderColor')}">		
						<mx:List id="depVbGrid" 
								dataProvider="{depVbs}" 
								labelField="nameValue"
								width="100%" 
								height="100%" 
								click="selectListElement(event);"
								editable="false" />
					</mx:Panel>
				</mx:HBox> 	
				
				<mx:VBox id="dataGrid" label="Data" width="100%" height="100%">
				<mx:VBox id="activeObjectForm" label="CurrentObject" width="100%" height="20%">
				<mx:Form id="modelInfo" label="Model" height="40%" width="100%">
		 	    	<mx:FormHeading label="Experiment Info"/>
					<mx:FormItem label="Description" direction="horizontal" width="100%">
						<mx:TextArea id="descriptionField" height="120" width="100%"
							text="{model.description}" valueCommit="{model.description = descriptionField.text}"/>
					</mx:FormItem>
					<mx:FormItem label="Date/Time" direction="horizontal" width="100%">
						<mx:Text text="{model.dateTime}" width="100%"/> 
					</mx:FormItem>
				</mx:Form>
				</mx:VBox>
				</mx:VBox>
				<!--<sp:SpreadSheet id="sheet" 
			    		width="100%" 
			    		height="100%" 
			    		borderStyle="solid" 
						backgroundColor="#ffffff"
						backgroundAlpha="1"/>-->
			
			</mx:VDividedBox> 
		</mx:VBox>
	</mx:HDividedBox> 	
        
</mx:VBox>