<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:base="edu.isi.bmkeg.kefedDesigner.*"
		 xmlns:view="edu.isi.bmkeg.kefedDesigner.view.*"
		 xmlns:diagBase="edu.isi.bmkeg.kefed.diagram.*"
		 xmlns:top="*"
		 xmlns:diagView="edu.isi.bmkeg.kefed.diagram.view.*"
		 xmlns:ooevv="edu.isi.bmkeg.ooevv.editor.view.*"
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 preinitialize="preinit()"
	 	 addedToStage="init()"
		 width="400" height="300">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.designer.events.elementLevel.SelectKefedElementEvent;
			import edu.isi.bmkeg.kefed.model.design.KefedModel;
			import edu.isi.bmkeg.kefed.model.design.KefedModelElement;
			
			import flare.data.DataSet;
			import flare.vis.data.Data;
			import flare.vis.data.DataList;
			
			import org.cytoscapeweb.ApplicationFacade;
			import org.cytoscapeweb.model.converters.*;
			import org.cytoscapeweb.model.data.ConfigVO;
			import org.cytoscapeweb.model.data.VisualStyleVO;
			import org.cytoscapeweb.util.Groups;
			import org.cytoscapeweb.util.Layouts;
			import org.puremvc.as3.patterns.observer.Notification;
			
			import spark.events.ListEvent;

			[Bindable]
			public var model:KefedModel;

			[Bindable]
			public var params:Object;
			
			private function preinit():void {
				params = new Object();
				params.idToken = "cytoscapeWeb";
				params.swfPath = "CytoScapeWeb";
				params.flashInstallerPath = "playerProductInstall.swf";
			}
			
			private function cancelSave(event:MouseEvent):void {
			}
			
			private function doSave(event:MouseEvent, exit:Boolean):void {
			}

			private function handleObjectDoubleClickInGrid(event:MouseEvent):void {
			}
			
			private function handleLinkSelectedInGrid(event:ListEvent):void {
			}
			
			private function objectsGridCompleted(event:Event):void {
			}
			
			private function traceEvent(event:Event):void {
				trace("Event ",event);
			}
			
			private function ooevvElementTypeLabelFunktion(item:Object, thisObject:Object):String {
				var k:KefedModelElement = KefedModelElement(item); 
				var p:RegExp = /Instance/;
				return k.elementType.replace(p,"");
			}
			
			private function ooevvElementLabelFunktion(item:Object, thisObject:Object):String {
				var k:KefedModelElement = KefedModelElement(item); 
				if( k.defn != null ) {
					return k.defn.termValue;
				} else {
					return "";
				}
			}
			
			private function init():void {
				
				var xml:XML = new XML(createData(10,10));
				
				var conv:GraphMLConverter = new GraphMLConverter();
				
				var vsOptions:Object = {
					global: {
						backgroundColor: "#fefefe",
						tooltipDelay: 1000
					},
					nodes: {
						shape: "ELLIPSE",
						compoundShape: "ROUNDRECT",
						//color: "transparent",//{ defaultValue: "#cccccc", continuousMapper: { attrName: "weight", minValue: "#ffffff", maxValue: "#0b94b1" } },
						compoundColor: "transparent",//{ defaultValue: "#cccccc", continuousMapper: { attrName: "weight", minValue: "#ff00ff", maxValue: "#00ff00" } },
						opacity: 0.9,
						size: { defaultValue: 20, continuousMapper: { attrName: "weight",  minValue: 20, maxValue: 40 } },
						borderWidth: 2,
						borderColor: "#707070",
						//image: "http://chart.apis.google.com/chart?chs=300x300&cht=p&chd=e0:U-gh..bR",
						//compoundImage: "http://chart.apis.google.com/chart?chxr=0,0,160&chxt=x&chbh=a&chs=440x220&cht=bhs&chco=4D89F9,C6D9FD&chd=s:GflxYlS,fl9YSYS",
						labelFontSize: { defaultValue: 12, continuousMapper: { attrName: "weight",  minValue: 10, maxValue: 24 } },
						tooltipText: { customMapper: { functionName: "onNodeTooltip" } },
						selectionGlowOpacity: 0,
						selectionBorderColor: "ff0000",
						hoverBorderWidth: 4
					},
					edges: {
						color: "#0b94b1",
						width: { defaultValue: 2, continuousMapper: { attrName: "weight",  minValue: 2, maxValue: 8 } },
						mergeWidth: { defaultValue: 2, continuousMapper: { attrName: "weight",  minValue: 2, maxValue: 8 } },
						mergeColor: "#0b94b1",
						opacity: 0.7,
						labelFontSize: 10,
						labelFontWeight: "bold",
						selectionGlowOpacity: 0,
						selectionColor: "ff0000",
						tooltipText: "${weight}"
					}
				};   
				
				var network_json = {
					// you need to specify a data schema for custom attributes!
					dataSchema: {
						nodes: [ { name: "label", type: "string" },
							{ name: "foo", type: "string" }
						],
						edges: [ { name: "label", type: "string" },
							{ name: "bar", type: "string" }
						]
					},
					// NOTE the custom attributes on nodes and edges
					data: {
						nodes: [ { id: "1", label: "1", foo: "Is this the real life?" },
							{ id: "2", label: "2", foo: "Is this just fantasy?" }
						],
						edges: [ { id: "2to1", target: "1", source: "2", label: "2 to 1", bar: "Caught in a landslide..." }
						]
					}
				};
				
				var draw_options:Object = {
					// your data goes here
					network: network_json,
					// hide pan zoom
					panZoomControlVisible: false
				};
				
				
				
				var note:Notification = new Notification(ApplicationFacade.DRAW_GRAPH, draw_options)
				ApplicationFacade.getInstance().notifyObservers(note);
			
			}
			
			private function createData(nodesNumber, edgesNumber):String {
				var data:String = '<graphml>' +
					'<key attr.type="string" attr.name="label" for="all" id="label"/>' +
					'<key attr.type="double" attr.name="weight" for="all" id="weight"/>' +
					'<graph edgedefault="undirected">';
				
				var i;
				for (i = 1; i <= nodesNumber; i++) {
					data += '<node id="'+i+'">' +
						'<data key="weight">'+Math.random()+'</data>' +
						'<data key="label">Node '+i+'</data>' +
						'</node>';
				}
				if (nodesNumber > 1) {
					for (i = 1; i <= edgesNumber; i++) {
						var src = 0, tgt = 0;
						while (src <= 0) {
							src = Math.round(Math.random() * nodesNumber);
						}
						while (tgt <= 0 || tgt === src) {
							tgt = Math.round(Math.random() * nodesNumber);
						}
						
						data += '<edge id="'+i+'" source="'+src+'" target="'+tgt+'">' +
							'<data key="weight">'+Math.random()+'</data>' +
							'<data key="label">Edge '+i+'</data>' +
							'</edge>';
					}
				}
				
				data += '</graph></graphml>';
				
				return data;
			}
			
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Model"/>
		<s:State name="MaterialEntity"/>
		<s:State name="Process"/>
		<s:State name="ProcessPoint"/>
		<s:State name="Constant"/>
		<s:State name="Parameter"/>
		<s:State name="Measurement"/>
	</s:states>
	
	<mx:HDividedBox width="100%" height="100%">

		<top:CytoscapeWeb id="cscapeModule" parameters="{params}" width="70%" height="100%"/>

		<s:Panel id="modelDetails" width="30%" height="100%" 
				  title="{model.exptId}"  
				  backgroundAlpha="{modelDetails.getStyle('borderAlpha')}" 
				  backgroundColor="{modelDetails.getStyle('borderColor')}">
					
			<ooevv:OoevvElementCatalog id="ooevvCat" width="100%" height="100%" />

		</s:Panel>
	</mx:HDividedBox>
	
</s:Group>
