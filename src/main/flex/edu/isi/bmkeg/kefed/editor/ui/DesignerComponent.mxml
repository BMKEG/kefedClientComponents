<?xml version="1.0" encoding="utf-8"?>
<!-- $Id$ 
     $Date$
     $Revision$ -->
<mx:VBox height="100%" width="100%" 
 	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:kapit="fr.kapit.*" 
    xmlns:components="fr.kapit.components.*" 
    xmlns:tree="fr.kapit.tree.*"
    xmlns:diagctl="com.kapit.diagram.controls.*" 
    xmlns:diagview="com.kapit.diagram.view.*"                
    xmlns:TDF="fr.kapit.tourdeflex.*"
    xmlns:ui="edu.isi.bmkeg.kefed.editor.ui.*"
    xmlns:kapit1="edu.isi.bmkeg.kefed.editor.ui.kapit.*"
	initialize="init();">
		
<mx:Script>
    <![CDATA[
    	import mx.events.IndexChangedEvent;
    	import mx.binding.utils.ChangeWatcher;
    	import edu.isi.bmkeg.kefed.editor.utils.powerloom.PLExporter;
    	import com.kapit.diagram.layers.DiagramLane;
    	import com.kapit.diagram.layers.DiagramPanel;
    	import edu.isi.bmkeg.kefed.editor.ui.kapit.DiagramMappings;
    	import flash.utils.getDefinitionByName;
    	import mx.managers.CursorManager;
    	import mx.utils.StringUtil;
    	import edu.isi.bmkeg.kefed.editor.store.ModelStoreEvent;
    	import edu.isi.bmkeg.kefed.editor.store.IDataStore;
    	import edu.isi.bmkeg.kefed.editor.store.elasticSearch.ElasticSearchModelStore;
    	import edu.isi.bmkeg.kefed.editor.store.IModelStore;
        import com.kapit.diagram.DiagramEvent;
		import com.kapit.diagram.layouts.utils.Constants;            
        import com.kapit.diagram.library.SVGAssetLibrary;
        import com.kapit.diagram.model.DiagramModel;
		import com.kapit.diagram.proxies.DiagramProxy;
        import com.kapit.diagram.proxies.KDLProxy;
		import com.kapit.diagram.view.DiagramObject;
		import com.kapit.diagram.view.DiagramSprite;
		import com.kapit.diagram.view.DiagramView;
        
        import edu.isi.bmkeg.kefed.editor.app.KefedAppEvent;
        import edu.isi.bmkeg.kefed.editor.app.KefedAppEventDispatcher;
		
		import edu.isi.bmkeg.kefed.editor.elements.KefedObject;
		import edu.isi.bmkeg.kefed.editor.elements.KefedModel;
		import edu.isi.bmkeg.kefed.editor.elements.KefedPersevereEvent;
		import edu.isi.bmkeg.kefed.editor.elements.KefedPersevereInterface;
		import edu.isi.bmkeg.kefed.editor.ui.kapit.KefedLinkProxy;
		import edu.isi.bmkeg.kefed.editor.ui.kapit.KefedObjectProxy;

		import flare.analytics.graph.LinkDistance;
//		import flare.vis.data.Data;
//		import flare.vis.data.DataList;
		import flare.vis.data.NodeSprite;

		import mx.collections.ArrayCollection;
		
		import mx.controls.Alert;
		
		import mx.core.FlexGlobals;
		import spark.components.Application;
		
		import mx.events.DataGridEvent;
		import mx.events.FlexEvent;
		import mx.events.ListEvent;
		
		import mx.managers.PopUpManager;

		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		
		import mx.utils.ColorUtil;

		// added to overcome 'class not found errors'
        private var hackFix1:KefedObjectProxy;
        private var hackFix2:KefedLinkProxy;

		[Bindable]
		public var myObjects:ArrayCollection;

		[Bindable]
		public var myLinks:ArrayCollection;

		[Bindable]
		public var myObject:KefedObject;

		[Bindable]
		public var graph:KefedModel = new KefedModel();

		[Bindable]
		public var zoomFactor:Number = 1;
		
		[Bindable]
		public var saveAllowed:Boolean = true;

		private var newPanelIndex:int = 0;  // Accordion panel index to set.
        private var _proxy:DiagramProxy;
            
        public function init():void
        {

            if( FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
						addEventListener(KefedAppEvent.EDIT_DESIGN, loadModelEventListener);
			}

		}
        
        public function initDiagram():void
        {
             _proxy = new KDLProxy(diagram);
            diagram.multipanel=false;
            diagram.selectionenabled=true;
            diagram.keyboardenabled=true;
            diagram.dragenabled=true;
            diagram.dropenabled=true;
            var sprites:Array = [];

			diagram.model = new DiagramModel(DiagramMappings.getDiagramMappings());
			
			if( diagram != null && _proxy != null) {

				diagram.addEventListener(DiagramEvent.SELECTION_CHANGED,
							handleDiagramSelectionChanged);
	
	            _proxy.importGraph();
	            _proxy.exportGraph(Constants.RADIAL_LAYOUT);
	  		}	
			
			this.loadModel(this.graph);
			diagram.addEventListener(DiagramEvent.DIAGRAM_ZOOM_MODE_SET, traceEvent);
			diagram.addEventListener(DiagramEvent.DIAGRAM_MODIFIED, traceEvent);
			diagram.addEventListener(DiagramEvent.ELEMENT_RESIZE_FINISHED, traceEvent);
            diagram.deselectAll();
        }
        
        /** Load the model into the designer component.
        * 
        * @param model The model to load into the editor
        */

		public function loadModel(model:KefedModel):void{
			CursorManager.setBusyCursor();
            graph = model;

			// Hack: loading the model the 2nd time triggers the 
			// editing updates when you load the diagram from XML
			// Having this temporary model that gets edited by 
			// the update and then discarded fixes the problem
			var tempModel:KefedModel = new KefedModel();
			KefedObjectProxy._graph = tempModel;
			KefedLinkProxy._graph = tempModel;
				
			myObjects = graph.bNodes;
			myLinks = graph.bEdges;
			
			if( diagram != null && _proxy != null) {
		
				diagram.fromXML(model.diagramXML);
				_proxy.importGraph()
				zoomControl.setZoom(zoomFactor);
            } 
			KefedObjectProxy._graph = graph;
			KefedLinkProxy._graph = graph;
			diagram.deselectAll();
			CursorManager.removeBusyCursor();
        }
        
		public function loadModelEventListener(event:KefedAppEvent):void {
			this.loadModel(event.activeModel);
            handleDiagramSelectionChanged(new Event(DiagramEvent.SELECTION_CHANGED));
        }
                
		private function cancelSave(event:MouseEvent):void {
			if( FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.CANCEL_DESIGN_EDIT);
			}
		}
		
		private function updateModel():void {
			var panel:DiagramPanel = diagram.panels.getDiagramPanelFromPoint(new Point(0,0));
			if (panel) panel.title = graph.modelName;
			var lane:DiagramLane = diagram.getDiagramLaneUnderPoint(new Point(0,0));
			if (lane) lane.title = graph.modelName;			
		}
		
		private function showPowerLoom(event:MouseEvent):void {
			var d:TextDisplayDialog = new TextDisplayDialog();
			d.title="PowerLoom Representation";
			d.displayText=PLExporter.generateModelDefinitionAssertion(graph, true);
			PopUpManager.addPopUp(d, this);
		}
		
		private function doSave(event:MouseEvent):void {
			updateModel();
	
			// Work around a bug with SVG generation in Kapit.  It only works
			// correctly when the zoom level is set to 1.  So that's what we 
			// do.  Fortunately, since we are exiting, we don't need to set
			// it back.
			if (diagram.childrenScaleX != 1 || diagram.childrenScaleY != 1) {
				zoomControl.setZoom(1);
			}			
			var svg:XML = diagram.toSVG();
			
			graph.diagramXML = diagram.toXML();
			if( FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.SAVE_DESIGN_EDIT, graph);
			}
		}
			
		private function handleFault(event:FaultEvent):void {
			Alert.show(event.message.toString());				
		}
		
		private function handleDiagramSelectionChanged(e:Event):void
		{
			var arr:Array=diagram.getSelectedObjects();
			
			var uid:String = null;
			var type:String = null;
			if( arr && arr.length == 1 ) { 
				var dObj:DiagramObject = DiagramObject(arr[0]);
				uid = dObj.dataobjectid;
			}
			
			if(uid) {
				for(var i:int=0;i<myObjects.length;i++) {
					if (myObjects.getItemAt(i).uid == uid) {
						if (objectsGrid != null) {
							objectsGrid.selectedIndex = i;
							objectsGrid.scrollToIndex(i);
						}
						myObject = KefedObject(myObjects.getItemAt(i));
						type = myObject.spriteid;
						currentState = (type.split(" ")).join("") + "_State";
						break;	
					}
				}
			} else {
				if (objectsGrid) objectsGrid.selectedIndex = -1;
				currentState = "";
			}
		}

		private function handleObjectSelectedInGrid(event:ListEvent):void {

            var uid:String = myObjects.getItemAt(event.rowIndex).uid;
            var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
            diagram.deselectAll();
            diagram.selectObject(dob);

        }
        
        private function handleObjectDoubleClickInGrid(event:MouseEvent):void {
        	editpanel.selectedIndex = 1;
        }
        				
        private function handleLinkSelectedInGrid(event:ListEvent):void {

            var uid:String = myLinks.getItemAt(event.rowIndex).uid;
            var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
            diagram.deselectAll();
            diagram.selectObject(dob);

        }

        private function showSVG(event:MouseEvent):void {
        	updateModel();
        	var oldZoom:Number = zoomControl.value;
        	trace("Setting zoom to 1, was " + zoomFactor);
        	zoomControl.setZoom(1);
			FlexGlobals.topLevelApplication.callLater(showSVG2, [oldZoom]);
        }
        
        private function showSVG2(oldZoom:Number):void {
        	var svg:XML = diagram.toSVG();
        	var d:TextDisplayDialog = new TextDisplayDialog();
			d.title="Diagram in SVG Format";
			trace("Capturing SVG image");
			d.displayText=svg.toXMLString();
			trace("Finished capturing SVG image");
			PopUpManager.addPopUp(d, this);
			trace("Setting zoom back to " + oldZoom);
			zoomControl.setZoom(oldZoom);
        }
        
        private function handleModelFieldChanged(field:String, newValue:String, event:FlexEvent):void {
        	graph[field] = StringUtil.trim(newValue);
        }
        
     private function handleObjectNameChanged(event:FlexEvent):void {

            var edit:TextInput = TextInput(event.currentTarget);
            var name:String = StringUtil.trim(edit.text);        	
            
            var uid:String = myObject.uid;        	
            
            var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
            if (dob.annotation)
            	dob.annotation.text = name;
            else
            	diagram.createAnnotation(dob, name);
			myObject.nameValue = name;
        }
        
        private function handleEditIndependentVariableData(event:DataGridEvent):void {

            var edit:TextInput = TextInput(event.currentTarget.itemEditorInstance);
            var dataValue:String = StringUtil.trim(edit.text);
                                 	
        }
        
       private function handleEditVariableData(event:DataGridEvent):void {

            var edit:TextInput = TextInput(event.currentTarget.itemEditorInstance);
            var dataValue:String = StringUtil.trim(edit.text);
                                 	
        }


        private function handleEditEnd(event:DataGridEvent):void {
        	
            var edit:TextInput = TextInput(event.currentTarget.itemEditorInstance);
            var name:String = StringUtil.trim(edit.text);        	
            
            var uid:String = myObjects.getItemAt(event.rowIndex).uid;        	
            
            var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
            if (dob.annotation)
            	dob.annotation.text = name;
            else 
            	diagram.createAnnotation(dob, name);
            
        }
        
        private function objectsGridCompleted(event:Event):void {
        	// Make sure any selection is highlighted when this item
        	// is built, since this can happen after some interactions with
        	// the graphical tool.
        	handleDiagramSelectionChanged(null);
        }
        
        private function traceEvent(event:Event):void {
        	trace("Event ",event);
        }
 
 
    ]]>
    
</mx:Script>

<mx:states>
	<mx:State name="ExperimentalObject_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
			<ui:NamedObjectTemplateTabs label="Experimental Object Details"
		    	diagram="{diagram}" myObject="{myObject}" width="100%" height="100%"/>
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="Activity_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
			<ui:NamedObjectTemplateTabs label="Activity Details"
		    	diagram="{diagram}" myObject="{myObject}" width="100%" height="100%"/>
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="ParameterSpecification_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
		    <ui:VariableTemplateTabs label="Parameter Specification Details"
		    	monotonic="false"
		    	diagram="{diagram}" myObject="{myObject}" width="100%" height="100%"/>
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="ConstantSpecification_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
		    <ui:VariableTemplateTabs label="Constant Specification Details"
		    	monotonic="false"
		    	diagram="{diagram}" myObject="{myObject}" width="100%"/>
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="MeasurementSpecification_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
		    <ui:VariableTemplateTabs label="Measurement Specification Details"
		    	monotonic="false"
		    	diagram="{diagram}" myObject="{myObject}" width="100%"/>
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="Branch_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
			<mx:Form width="100%">
				<mx:FormHeading label="Branch Details"/>
				<mx:FormItem label="" direction="horizontal" width="100%">
					<mx:Label text="No additional information required"/>
				</mx:FormItem>
			</mx:Form>		
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
	<mx:State name="Fork_State">
		<mx:AddChild relativeTo="{activeObjectForm}">
			<mx:Form width="100%">
				<mx:FormHeading label="Fork Details"/>
				<mx:FormItem label="" direction="horizontal" width="100%">
					<mx:Label text="No additional information required"/>
				</mx:FormItem>
			</mx:Form>			
		</mx:AddChild>
		<mx:RemoveChild target="{modelInfo}"/>
	</mx:State>
</mx:states>

<mx:HDividedBox width="100%" height="100%">

	<mx:VBox width="70%" height="100%">
		<mx:Panel id="flatPanel" width="100%" height="100%" title="{graph.modelName}"
				backgroundAlpha="{flatPanel.getStyle('borderAlpha')}" 
				backgroundColor="{flatPanel.getStyle('borderColor')}" >                
			
			<mx:HBox width="100%" height="30" verticalAlign="middle" >
			
				<diagctl:SVGAssetLibraryGroupTile
						width="184" 
						height="28" 
						groupid="Basic"  
						paddingLeft="8" 
						paddingBottom="3" 
						paddingTop="3" 
						useHandCursor="true" />
				<mx:Label text="Zoom: "/>
				<kapit1:DiagramZoomHSlider id="zoomControl"
			        	minimum="0" maximum="1.7" value="{zoomFactor}" diagram="{diagram}"/>
			    <mx:Button label="Reset Zoom" click="zoomControl.setZoom(1)"/>
			    <mx:Button label="SVG" click="showSVG(event)" enabled="{zoomControl.value == 1}"
			    	toolTip="Show SVG code for diagram.  Zoom control must be at 1."/>
			</mx:HBox>
			<mx:HBox width="100%" height="100%" verticalAlign="middle" >
				<diagview:DiagramView width="100%" height="100%" id="diagram" creationComplete="initDiagram();">
		        </diagview:DiagramView>
			</mx:HBox>
		</mx:Panel>
	    <mx:Text width="100%" text="Drag design elements into the diagram panel. Click on an element to show context menu. Edit labels in diagram, elements list or active element panel."/>
	</mx:VBox>
	
	<mx:Panel id="modelDetails" width="30%" height="100%" 
				title="{graph.modelName}"  
				backgroundAlpha="{modelDetails.getStyle('borderAlpha')}" 
				backgroundColor="{modelDetails.getStyle('borderColor')}">
		<mx:Accordion id="editpanel" height="100%" width="100%" selectedIndex="1">
			<mx:Panel id="elementGrid" label="Model Elements" height="100%" width="100%"
				backgroundAlpha="{modelDetails.getStyle('borderAlpha')}" 
				backgroundColor="{modelDetails.getStyle('borderColor')}">
		 	     <!-- <mx:Label fontWeight="bold" text="All Elements:"/> -->
				<mx:DataGrid id="objectsGrid" 
								dataProvider="{myObjects}" 
								itemClick="handleObjectSelectedInGrid(event);"
								doubleClickEnabled="true"
								doubleClick="handleObjectDoubleClickInGrid(event);"
								creationComplete="objectsGridCompleted(event);"
								width="100%" 
								height="100%" 
								editable="true" >
					<mx:columns>
					<mx:DataGridColumn headerText="KEfED Type" dataField="spriteid" editable="false"/>
					<mx:DataGridColumn headerText="Name" dataField="nameValue" editable="true"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:Panel>
			
			<mx:Panel label="Current Object" id="activeObjectForm" width="100%" height="100%"
				backgroundAlpha="{modelDetails.getStyle('borderAlpha')}" 
				backgroundColor="{modelDetails.getStyle('borderColor')}">
				<mx:Form id="modelInfo" label="Model" height="40%" width="100%">
		 	    	<mx:FormHeading label="Model Info"/>
		 	    	<mx:FormItem label="Name" direction="horizontal" width="100%">
						<mx:TextInput id="nameField" width="100%"
							text="{graph.modelName}" valueCommit="{graph.modelName = nameField.text}"/>
					</mx:FormItem>
					<mx:FormItem label="Description" direction="horizontal" width="100%">
						<mx:TextArea id="descriptionField" height="120" width="100%"
							text="{graph.description}" valueCommit="{graph.description = descriptionField.text}"/>
					</mx:FormItem>
					<mx:FormItem label="Date/Time" direction="horizontal" width="100%">
						<mx:Text text="{graph.dateTime}" width="100%"/> 
					</mx:FormItem>
					<mx:FormItem label="Source" direction="horizontal" width="100%">
						<mx:TextInput id="sourceField" width="100%"
							text="{graph.source}" valueCommit="{graph.source = sourceField.text}"/> 							<!--  -->
					</mx:FormItem>
					<mx:FormItem label="Citation Key" direction="horizontal" width="100%">
						<mx:TextInput id="citationField" width="100%"
							text="{graph.citeKey}" valueCommit="{graph.citeKey = citationField.text}"/> 							<!--  -->
					</mx:FormItem>
					<mx:FormItem label="Type" direction="horizontal" width="100%">
						<mx:Text text="{graph.type}" width="100%"/> 
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>		
		</mx:Accordion>
		
		 
			<mx:Button id="showPlButton" label="Show PowerLoom" click="showPowerLoom(event)" />
			
			<mx:ControlBar id="controlForm" label="Control Form">
				<mx:Button label="Save Design" click="doSave(event)" enabled="{saveAllowed}" />
				<mx:Button label="Cancel" click="cancelSave(event)"/>
			</mx:ControlBar>
	</mx:Panel>
	
</mx:HDividedBox>

</mx:VBox>
