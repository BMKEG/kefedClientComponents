<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:base="edu.isi.bmkeg.kefed.data.*"
		 xmlns:view="edu.isi.bmkeg.kefed.data.view.*"
		 xmlns:diagBase="edu.isi.bmkeg.kefed.diagram.*"
		 xmlns:diagView="edu.isi.bmkeg.kefed.diagram.view.*"
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="400" height="300" xmlns:subElements="edu.isi.bmkeg.kefed.data.view.subElements.*">
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.data.view.*;
			import edu.isi.bmkeg.kefed.data.view.subElements.*;
			import edu.isi.bmkeg.kefed.events.elementLevel.SelectKefedElementEvent;
			import edu.isi.bmkeg.kefed.designer.view.popups.*;
			import edu.isi.bmkeg.kefed.events.*;
			import edu.isi.bmkeg.kefed.model.design.*;
			import edu.isi.bmkeg.ooevv.model.ExperimentalVariable;
			import edu.isi.bmkeg.ooevv.model.scale.*;
			import edu.isi.bmkeg.ooevv.model.scale.MeasurementScale;
			
			import mx.charts.HitData;
			import mx.charts.chartClasses.DataTip;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.ScrollPolicy;
			import mx.managers.PopUpManager;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			
			import spark.events.ListEvent;
			
			[Bindable]
			public var model:KefedModel;

			[Bindable]
			protected var activeVb:VariableInstance;
			
			[Bindable]
			protected var dataTable:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var variableType:ExperimentalVariable = null;
			
			[Bindable]
			protected var depVbs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var indepVbs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var cntrlVbs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var saveAllowed:Boolean = true;
			
			private function cancelSave(event:MouseEvent):void {
			}
			
			private function doSave(event:MouseEvent, exit:Boolean):void {
			}
			
			/*private function handleObjectSelectedInGrid(event:MouseEvent):void {
				var i:int = objectsGrid.selectedIndex;
				var k:KefedModelElement = KefedModelElement(model.elements.getItemAt(i));
				this.dispatchEvent(new SelectKefedElementEvent(k.uuid));
			}*/
			
			private function handleObjectDoubleClickInGrid(event:MouseEvent):void {
			}
			
			private function handleLinkSelectedInGrid(event:ListEvent):void {
			}
			
			private function objectsGridCompleted(event:Event):void {
			}
			
			private function traceEvent(event:Event):void {
				trace("Event ",event);
			}
			
			private function ooevvElementTypeLabelFunktion(item:Object, thisObject:Object):String {
				var k:KefedModelElement = KefedModelElement(item); 
				var p:RegExp = /Instance/;
				return k.elementType.replace(p,"");
			}
			
			private function ooevvElementLabelFunktion(item:Object, thisObject:Object):String {
				var k:KefedModelElement = KefedModelElement(item); 
				if( k.defn != null && k.defn != null) {
					return k.defn.termValue;
				} else {
					return "";
				}
			}
			
			protected function loadButton_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new ActivateKefedModelListPopupEvent() );
				
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new SaveCompleteKefedModelEvent(this.model) );
			}
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// Copied from old spreadsheet
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			public function selectDepVb(event:MouseEvent):void {
				indepVbGrid.selectedIndex = -1;
				cntrlVbGrid.selectedIndex = -1;			            
				if (depVbGrid.selectedIndex >= 0) { 
					activeVb = depVbs[depVbGrid.selectedIndex];
					
					//TODO: dispatch select event
					//selectDiagramElement(activeVb); 
					
					buildMeasurementVariableDataGrid(activeVb, depVbData);

					/* 
					if (model.experimentData[activeVb.uid] == null) {
						model.experimentData[activeVb.uid] = new ArrayCollection();
					}
					dataTable = model.experimentData[activeVb.uid]; // Need to update this?
					*/
					
					currentState = "MeasurementSpecification_State";
					
				} else {
					
					currentState = "";
				
				}			
			
			}
			
			public function selectIndepVb(event:MouseEvent):void {       
				depVbGrid.selectedIndex = -1;
				cntrlVbGrid.selectedIndex = -1;			            
				if (indepVbGrid.selectedIndex >= 0) {          
					activeVb = indepVbs[indepVbGrid.selectedIndex];

					//TODO: dispatch select event
					//selectDiagramElement(activeVb); 

					variableType = activeVb.defn as ExperimentalVariable;
					// dataTable = activeVb.oldDataTable;
					currentState = "ParameterSpecification_State";
				} else {
					currentState = "";
				}
			}	
			
			public function selectCntrlVb(event:MouseEvent):void {
				indepVbGrid.selectedIndex = -1;
				depVbGrid.selectedIndex = -1;			            
				if (cntrlVbGrid.selectedIndex >= 0) {          
					activeVb = cntrlVbs[cntrlVbGrid.selectedIndex];
					
					//TODO: dispatch select event
					//selectDiagramElement(activeVb); 

					variableType = activeVb.defn as ExperimentalVariable;
					// dataTable = activeVb.oldDataTable;
					currentState = "ConstantSpecification_State";
				} else {
					currentState = "";
				}
			}
			
			/** Builds the data grid for a measurement variable.
			 */		
			private function buildMeasurementVariableDataGrid(depV:VariableInstance, depVbData:DataGrid):void {
				
				var cols:Array = new Array();
				
				//
				// Go back through graph and build pathways from all independent 
				// variables and the current dependent variable.
				// 
				// TODO: Should this also pick up controlled variables and show
				//       them in context?
				/* TODO: Transfer this to latest design
				var dependentVariableDataTable:ArrayCollection = depV.oldDataTable;
				var dependOnsArray:ArrayCollection = model.getDependOnsForMeasurement(depV);
				
				// Make array for independent variables
				for(var i:int=0; i<dependOnsArray.length; i++) {
					createVariableDataRenderer(dependOnsArray[i] as KefedObject, cols);
				}
				
				// Now handle the Dependent variable structure as well.
				createVariableDataRenderer(depV, cols);*/
				
				depVbData.columns = cols;
			}
			
			/** Create a variable data renderer of the appropriate type and
			 *   stores it into the column array.
			 * 
			 * @param variable The variable object
			 * @param renderers Array for holding the data renderers.
			 */
			private function createVariableDataRenderer(variable:VariableInstance, renderers:Array):void {
				
				var dgc:DataGridColumn;
				
				var vbDefn:ExperimentalVariable = ExperimentalVariable(variable.defn);
				var scale:MeasurementScale = vbDefn.scale;
				
				if (scale is CompositeScale) {
					
					var cScale:CompositeScale = CompositeScale(scale);
					for each (var field:ExperimentalVariable in cScale.variables) {
						dgc = new ComplexDataGridColumn();
						// Hack:  Include a space after the "." to allow the headerline
						//        to word wrap at that position.
						dgc.headerText = vbDefn.termValue + ". " + field.termValue;
						dgc.dataField = vbDefn.fullTermURI + "." + field.fullTermURI;
						dgc.headerWordWrap = true;
						dgc.showDataTips = true;
						setupItemRendererForType(dgc, scale);
						renderers.push(dgc);
					}
				} else {
					dgc = new ComplexDataGridColumn();
					dgc.headerText = vbDefn.termValue;
					dgc.dataField = vbDefn.fullTermURI;
					dgc.showDataTips = true;
					dgc.headerWordWrap = true;
					setupItemRendererForType(dgc, scale);
					renderers.push(dgc);	
				}
			}
			
			/** Decides which data renderer is most appropriate for the type and
			 *   template information that is stored for this item.  Then sets the
			 *   DataGridColumn appropriately for handling that data renderer.
			 * 
			 * @param dgc The datagrid column to setup for the item
			 * @param vTemplate The base value template for the item
			 */
			private function setupItemRendererForType(dgc:DataGridColumn, 
													   scale:MeasurementScale):void {
				
				if (scale is BinaryScale) {
				
					dgc.itemRenderer = new DataEntryCheckBoxFactory(scale);
					dgc.editorDataField = "selected";
					dgc.rendererIsEditor = true;
				
				} else if (scale is FileScale ) {
				
					dgc.itemRenderer = new DataEntryEditorFactory(scale);
					dgc.rendererIsEditor = true;
				
				} else if (scale is TimestampScale) {

					dgc.itemRenderer = new DataEntryEditorFactory(scale);
					dgc.rendererIsEditor = true;
					
				} else if ( scale is DecimalScale ) {
					
					dgc.itemRenderer = new DataEntryUnitsFactory(scale);
					dgc.editorDataField = "dataItem";
					dgc.rendererIsEditor = true;
					dgc.showDataTips = true;
					dgc.dataTipFunction = unitsDataTipFunction;
				
				} else if (scale is NominalScale == "Region") {
				
					dgc.labelFunction = regionLabelFunction;
					dgc.itemEditor = new DataEntryRelativeRegionFactory(scale);
					//        		var t:RelativeRegionEditor = dgc.itemEditor.newInstance() as RelativeRegionEditor;
					//        		t.computeSize();
					//        		trace("Editor=",t," h=",t.measuredHeight," w=",t.measuredWidth);
					dgc.editorDataField = "dataItem";
					dgc.editorHeightOffset = RelativeRegionEditor.EDITOR_HEIGHT_OFFSET;
					dgc.editorWidthOffset = RelativeRegionEditor.EDITOR_WIDTH_OFFSET;
					dgc.rendererIsEditor = false;
					dgc.dataTipFunction = regionDataTipFunction;

				} else if (scale is NominalScale 
					|| scale is IntegerScale 
					|| scale is DecimalScale) {
				
					//  				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
					//				dgc.rendererIsEditor = true;
					dgc.itemEditor = new DataEntryEditorFactory(scale);
					dgc.dataTipFunction = simpleDataTipFunction;
				
				} /*else if (scale.allowedValues.length > 0) {
				
					//				dgc.itemRenderer = new DataEntryComboFactory(vTemplate);
					//				dgc.rendererIsEditor = true;
					dgc.itemEditor = new DataEntryComboFactory(scale);
					dgc.dataTipFunction = simpleDataTipFunction;
				
				} else {
				
					//				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
					//				dgc.rendererIsEditor = true;
					dgc.itemEditor = new DataEntryEditorFactory(scale);
					dgc.dataTipFunction = simpleDataTipFunction;
			
				}*/
			
			}
			
			private function formatRegion(regionObject:Object):String {
				if (regionObject) {
					var prefix:String = " ";
					var regions:String = "";
					for each (var rName:String in (regionObject.regions as Array)) {
						regions += prefix + rName;
						prefix = ", ";
					}
					return regionObject.relation + regions;
				} else {
					return "";
				}
			}
			
			private function regionLabelFunction(item:Object, col:DataGridColumn):String {
				return formatRegion(getNestedValue(item, col.dataField));
			}
			
			private function regionDataTipFunction(data:Object):String {
				return (data) ? formatRegion(data) : "";
			}
			
			private function unitsDataTipFunction(data:Object):String {
				return (data) ? data.value + " " + data.units : "";
			}
			
			private function simpleDataTipFunction(data:Object):String {
				return (data) ? data.toString() : "";
			}
			
			
			/** Follows a chain of fieldNames separated by "." characters.
			 *
			 * @param obj The object to operate on
			 * @param fieldName The fieldname to use for access
			 * @return The end value from following the chain
			 */
			private function getNestedValue(obj:*, fieldName:String):* {
				var dotIndex:int = fieldName.indexOf(".");
				if (obj == null || obj == undefined) {
					return obj;
				} else if (dotIndex == -1) {
					return obj[fieldName];
				} else {
					var first:String = fieldName.substring(0,dotIndex);
					var rest:String  = fieldName.substring(dotIndex+1);
					return getNestedValue(obj[first], rest);
				}
			}
			
			public function buildDependentVariableSpreadSheet(depV:MeasurementInstance):String {
				
				var ss:String = "";
				
				if( depV == null ) {
					return ss;
				}
				
				// TODO:  Should this also display the controlled variable values?
				/*var indepVbArray:ArrayCollection = this.model.getDependOnsForMeasurement(depV);
				var indepVbTupleProperties:Object = new Object();
				
				for( var i:int=0; i<indepVbArray.length; i++) {
					var indepVb1:KefedObject = KefedObject(indepVbArray[i]);
					indepVbTupleProperties[indepVb1.nameValue] = "";			
				}
				indepVbTupleProperties.value = "";	
				
				// First row sets the column names
				// TODO: Need to set the autoCompletionOptions.
				for( var j:int=0; j<indepVbArray.length; j++) {
					var indepVb2:KefedObject = KefedObject(indepVbArray[j]);
					if( j > 0 ) ss += "\t";
					ss += indepVb2.nameValue;
				}
				ss += "\t" + depV.nameValue + "\n";*/
				
				return ss;
			
			}
			
			private function handleAddRowEditDependentVariableData():void {   	
			
				/*var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
				var o:Object = model.buildDependentVariableDataObject(activeVb, null);
				ac.addItem(o);
				depVbData.selectedIndex = ac.length - 1;*/
			
			}
			
			private function handleCopySelectedRowEditDependentVariableData():void {
			
				/*var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
				var o:Object = model.buildDependentVariableDataObject(activeVb, depVbData.selectedItem);
				ac.addItem(o);
				depVbData.selectedIndex = ac.length - 1;*/
			
			}
			
			private function handleCopyLastRowEditDependentVariableData():void {
				
				/*var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
				var o:Object = model.buildDependentVariableDataObject(activeVb, ac.getItemAt(ac.length - 1));
				ac.addItem(o);
				depVbData.selectedIndex = ac.length - 1;*/
			
			}
			
			private function handleRemoveRowEditDependentVariableData():void {

				/*var dg:DataGrid = DataGrid(this.depVbData);
				var ac:ArrayCollection = ArrayCollection(dg.dataProvider);
				var i:int = dg.selectedIndex;
				if( i == -1 ) {
					i = ac.length - 1;
				}
				ac.removeItemAt(i);*/
			
			}
			
			private function switchToSpreadsheet(): void {

				/*if( this.activeVb.isMeasurement()) { 	
					this.spreadsheet.text = this.buildDependentVariableSpreadSheet(activeVb);
					currentState = "Spreadsheet_State";
				} */     	
			
			}
			
			private function switchFromSpreadsheet(): void {
				
				if( this.activeVb is MeasurementInstance ) {
					
					currentState = "MeasurementSpecification_State";
				
				} else if( this.activeVb is ParameterInstance ) { 	
				
					currentState = "ParameterSpecification_State";
				
				} else if( this.activeVb is ConstantInstance ) { 	

					currentState = "ConstantSpecification_State";

				} else {
				
					currentState = '';
				
				}
			
			}
			
			// What does this function do?
			private function getVbNameHash(vb:VariableInstance): Object {
				
				var vbNameHash:Object = new Object();        	
				
				/*if( this.activeVb is MeasurementInstance ) {
				
					// TODO:  Does this need something similar for controlled variables?
					var indepVbArray:ArrayCollection = this.model.getParametersForMeasurement(activeVb);
					for(var i:int=0; i<indepVbArray.length; i++) {
						var indepVb:KefedObject = indepVbArray[i];
						vbNameHash[indepVb.nameValue] = i;
					}
					vbNameHash[activeVb.nameValue] = indepVbArray.length; 
				
				} else if( this.activeVb.isParameter() ) {
				
					vbNameHash[activeVb.nameValue] = 0; 
				
				} else if( this.activeVb.isConstant() ) {
				
					vbNameHash[activeVb.nameValue] = 0; 
				
				}*/
				
				return vbNameHash;
				
			}
			
			private function getErrorStrings(): String {
				var ss:String = this.spreadsheet.text;
				var re:RegExp = /[\n\r]/;
				var lines:Array = ss.split(re);
				var vbNames:Array = lines[0].split("\t");
				
				//
				// Build hash table to provide lookup for values in document
				//
				var vbNameHash:Object = this.getVbNameHash(this.activeVb);        	
				var ssWidth:int = 0;
				for (var field:* in vbNameHash ) {
					ssWidth++;
				}
				
				// Check to make sure that the variable names are correct.
				var error:String = "";
				for(var i:int=0; i<vbNames.length; i++) {
					var vbName:String = vbNames[i];
					if( vbNameHash[vbName] == null ) {
						error += "Variable " + vbName + " not found in design.\n";
					}
				}
				
				for(i=1; i<lines.length; i++) {
					var line:String = lines[i];
					var row:Array = line.split("\t");
					if( row.length != ssWidth ) {
						error != "Row " + i + " is of incorrect length.\n";
					}
				}
				
				return error;			
			}
			
			
			private function checkSpreadsheetData(): void {
				var error:String = this.getErrorStrings();        	
				if( error.length > 0 ) 
					Alert.show(error);
			}
			
			private function loadSpreadsheetDataToGrid(): void {
				var error:String = this.getErrorStrings();        	
				if( error.length > 0 ) 
					return;
				
				// Sneaky trick. Use a hash of hashes to load new data from 
				// dependent variables columns into system
				var vbNameHash:Object = getVbNameHash(this.activeVb);
				for (var field:* in vbNameHash ) {
					vbNameHash[field] = new Object();
				}        	
				
				/*var dt:ArrayCollection = activeVb.oldDataTable;
				
				var ss:String = this.spreadsheet.text;    
				
				var re:RegExp = /[\n\r]/;
				var lines:Array = ss.split(re);
				var vbNames:Array = lines[0].split("\t");
				
				for(var i:int=1; i<lines.length; i++) {
					var line:String = lines[i];
					if(line.length == 0) {
						continue;
					}
					var fields:Array = line.split("\t");
					var row:Object = new Object();
					
					for(var j:int=0; j<fields.length; j++) {
						field = fields[j];
						var fieldName:String = vbNames[j];
						if( fieldName == activeVb.nameValue ) {
							row.value = field;	    				
						} else {
							row[fieldName] = field;
							vbNameHash[fieldName][field] = -1;
						}
					}
					dt.addItem(row);
				}
				
				var indepVbArray:ArrayCollection = this.model.getParametersForMeasurement(activeVb);
				for( i=0; i<indepVbArray.length; i++ ) {
					var indepVb:KefedObject = indepVbArray[i];
					var dataToAdd:ArrayCollection = new ArrayCollection();
					
					// existing data in the independent variable
					var lookup:Object = new Object();
					for(var k:int=0; k<indepVb.oldDataTable.length; k++){
						lookup[indepVb.oldDataTable[k].value] = -1;
					}
					
					for (var v:* in vbNameHash[indepVb.nameValue] ) {
						if( lookup[v] == null ) {
							var o:Object = new Object();
							o.value = v;
							indepVb.oldDataTable.addItem(o);		
						}
					}     	
				} */
			
				this.switchFromSpreadsheet();
			
			}
			
		]]>
	</fx:Script>

	<mx:VBox height="100%" width="100%" includeIn="ConstantSpecification_State" >
		<subElements:VariableTemplateTabs myObject="{activeVb.defn}" 
										  monotonic="true" enabled="true"/>
	</mx:VBox>

	<mx:VBox height="100%" width="100%" includeIn="ParameterSpecification_State">
		<subElements:VariableTemplateTabs myObject="{activeVb.defn}" 
										  monotonic="true" enabled="true" />
	</mx:VBox>

	<mx:VBox height="100%" width="100%" includeIn="MeasurementSpecification_State">
		<mx:Text text="{activeVb.defn.termValue}" fontSize="14" />
		<!-- Need to turn off sorting, because it doesn't work correctly when a
		complex dotted sort field form is used in the DataGrid. 
		TODO: Investigate whether AdvancedDataGrid solves this problem, or
		perhaps if Flex 4 may have fixed it. -->
		<mx:DataGrid id="depVbData" 
					 dataProvider="{dataTable}" 
					 sortableColumns="false"
					 width="100%" 
					 height="100%" 
					 editable="true"
					 horizontalScrollPolicy="{ScrollPolicy.ON}"
					 variableRowHeight="true"
					 headerStyleName="leftBold"
					 />		<!-- itemEditEnd="handleEndEditEvent(event)" -->
		<mx:HBox width="100%">
			<mx:Button label="Add Row" 
					   click="handleAddRowEditDependentVariableData()"/>
			<mx:Button id ="CopySelectedDataRowButton"
					   enabled="{depVbData.selectedIndex != -1}"
					   label="Copy Row"
					   click="handleCopySelectedRowEditDependentVariableData()"/>
			<mx:Button id="CopyLastDataRowButton"
					   enabled="{dataTable.length > 0}"
					   label="Copy Last Row"
					   click="handleCopyLastRowEditDependentVariableData()"/>
			<mx:Button id="RemoveDataRowButton"
					   label="Remove Row"
					   enabled="{depVbData.selectedIndex != -1}"
					   click="handleRemoveRowEditDependentVariableData()"/>
		</mx:HBox>
	</mx:VBox>	
	
	<mx:VBox height="100%" width="100%" includeIn="Spreadsheet_State">
		<mx:TextArea id="spreadsheet" height="100%" width="100%"/> 
		<mx:HBox width="100%">
			<mx:Button label="Check Data" 
					   click="checkSpreadsheetData()"/>
			<mx:Button label="Load to Grid"
					   click="loadSpreadsheetDataToGrid()"/>
			<mx:Button label="Cancel Batch"
					   click="switchFromSpreadsheet()"/>
		</mx:HBox>
	</mx:VBox>		
	
	
	<mx:states>
		<mx:State name="ConstantSpecification_State"/>
		<mx:State name="ParameterSpecification_State"/>
		<mx:State name="MeasurementSpecification_State"/>
		<mx:State name="Spreadsheet_State"/>			
	</mx:states>
	
	<mx:HDividedBox width="100%" height="100%">
			
		<s:Panel id="modelPanel" 
				 width="30%" 
				 height="100%" 
				 title="Expt. Design" 
				 skinClass="edu.isi.bmkeg.kefed.designer.view.KefedDesignerModuleSkin">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			
			<!--<diagView:KefedDiagramModule width="100%" height="100%"/>-->
			
		</s:Panel>				
			
		<mx:VBox height="100%" width="100%">
			<mx:HBox width="100%">
				<mx:Label text="{model.exptId}" fontSize="18" />
				<mx:Spacer width="100%"/>
			</mx:HBox>
			<mx:HBox  height="40" width="100%">
				<mx:Label text="Source:" fontSize="12"/>
				<!--<mx:TextInput id="modelSource" text="{model.source}" fontSize="12"
							  valueCommit="{model.source = modelSource.text}"/>
				<mx:Label text="Name:" fontSize="12"/>
				<mx:TextInput id="modelName" text="{model.modelName}" fontSize="12" 
							  valueCommit="{model.modelName = modelName.text}"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Show PowerLoom" click="showModelPowerLoom(event)"/>
				<mx:Button label="Save Data" click="saveCurrentModel(event)" enabled="{saveAllowed}"/>
				<mx:Button label="Cancel" click="cancelSave(event)"/>
				<mx:Button label="Debug" click="doDebug(event)"/>-->
			</mx:HBox>
			
			<mx:VDividedBox width="100%" height="100%">
				<mx:HBox width="100%" height="30%">
					<mx:Panel id="cntrlVaribleList" width="33%" height="100%" 
							  title="Controlled Variables"
							  backgroundAlpha="{indepVaribleList.getStyle('borderAlpha')}" 
							  backgroundColor="{indepVaribleList.getStyle('borderColor')}">
						<mx:List id="cntrlVbGrid" 
								 dataProvider="{cntrlVbs}"
								 labelField="nameValue"
								 width="100%" 
								 height="100%" 
								 click="selectCntrlVb(event);"
								 editable="false"/>
					</mx:Panel>	
					
					<mx:Panel id="indepVaribleList" width="33%" height="100%" 
							  title="Independent Variables"
							  backgroundAlpha="{indepVaribleList.getStyle('borderAlpha')}" 
							  backgroundColor="{indepVaribleList.getStyle('borderColor')}">
						<mx:List id="indepVbGrid" 
								 dataProvider="{indepVbs}"
								 labelField="nameValue"
								 width="100%" 
								 height="100%" 
								 click="selectIndepVb(event);"
								 editable="false"/>
					</mx:Panel>	
					
					<mx:Panel id="depVaribleList" width="33%" height="100%" 
							  title="Dependent Variables"
							  backgroundAlpha="{depVaribleList.getStyle('borderAlpha')}" 
							  backgroundColor="{depVaribleList.getStyle('borderColor')}">		
						<mx:List id="depVbGrid" 
								 dataProvider="{depVbs}" 
								 labelField="nameValue"
								 width="100%" 
								 height="100%" 
								 click="selectDepVb(event);"
								 editable="false" />
					</mx:Panel>
				</mx:HBox> 	
				
				<mx:VBox id="dataGrid" label="Data" width="100%" height="100%">
					<mx:VBox id="activeObjectForm" label="CurrentObject" width="100%" height="20%">
						<mx:Form id="modelInfo" label="Model" height="40%" width="100%">
							<mx:FormHeading label="Experiment Info"/>
							<!-- <mx:FormItem label="Description" direction="horizontal" width="100%">
								<mx:TextArea id="descriptionField" height="120" width="100%"
											 text="{model.description}" valueCommit="{model.description = descriptionField.text}"/>
							</mx:FormItem>-->
							<!--<mx:FormItem label="Date/Time" direction="horizontal" width="100%">
								<mx:Text text="{model.dateTime}" width="100%"/> 
							</mx:FormItem>-->
						</mx:Form>
					</mx:VBox>
				</mx:VBox>
				
			</mx:VDividedBox> 
		</mx:VBox>
		
	</mx:HDividedBox>
	
</mx:Module>
