<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: TypeTemplateForm.mxml 1480 2010-12-15 01:33:48Z tom $ 
     $Date: 2010-12-14 17:33:48 -0800 (Tue, 14 Dec 2010) $
     $Revision: 1480 $ -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="edu.isi.bmkeg.kefed.data.view.subElements.*"
	creationComplete="initTypeOptions()">
	<!-- Form for entering type information for KEfED variable templates.
	Allows the input of the types, ontology information and allowed values.
	Based on the type of type information this may or may not allow multi-slot
	values to be specified.
	
	Takes myType property which should be a KefedBaseTypeTemplate or a KefedFullTypeTemplate. -->
<mx:Script>
	<![CDATA[
		import mx.utils.StringUtil;
		import mx.controls.dataGridClasses.DataGridColumn;
	
	import mx.events.FlexEvent;
	import mx.managers.PopUpManager;
	import mx.collections.ArrayCollection;
	import mx.controls.TextInput;

	import edu.isi.bmkeg.kefed.model.design.VariableInstance;
	import edu.isi.bmkeg.ooevv.model.scale.*;
	
	private static const SLOT_PREFIX:String = "Field-";
	private static const FIELD_WIDTH:Number = 100; // Width of min/max value fields.
	
	[Bindable]
	public var myType:MeasurementScale;
	
	/** Monotonic controls whether only monotonic changes are allowed
	 *  or whether all changes are allowed.  Monotonic changes only 
	 *  allow additional values to be added to the allowed values or
	 *  allowed units sections.  Renaming or removal of values are
	 *  prohibited when monotonic is <code>true</code>
	 */
	[Bindable]
	public var monotonic:Boolean = false;

	public static var typeUpdateMap:Object = {"multiple slots": "Table",
		                                       "table"        : "Table",
											   "number"       : "Decimal",
											   "number with units" : "Decimal with units",
											   "true or false" : "True/False",
											   "string"        : "Text"}
	
	
	/** Initialize this by adjusting the allowed values for the types
	 *  depending on whether this is a full or a base value type template.
	 * 
	 *  Full values allows table values whereas base values do not.
	 */
	public function initTypeOptions():void {
		if (myType != null) {
			if (myType is CompositeScale) {
				typeOptions.addItem("Table");
			}
			// Update for changed name.  Should be temporary!
			/*if (typeUpdateMap[myType.valueTypeName] != null) {
				myType.valueTypeName = typeUpdateMap[myType.valueTypeName];
			}*/
			var typeIndex:int = typeOptions.getItemIndex(myType.classType);
			//if (typeIndex == -1) 
			//	typeIndex = typeOptions.getItemIndex(KefedBaseValueTemplate.DEFAULT_VALUE_TYPE);
			typeList.selectedIndex = typeIndex;
		}
	}	
	
    /** Change the type of the object in the slot of the object itself
	 *  Update the state to reflect the correct input view for this type
	 *
	 * @param event The event triggered by the type change
	 */
    private function handleVariableTypeChange (event:FlexEvent):void {
    	var typeobj:Object = ComboBox(event.currentTarget).selectedItem;
    	if (typeobj != null && myType != null) {
    		myType.classType = String(typeobj);
    		currentState = ((typeobj as String).split(" ")).join("_").replace("/","_") + "_State";
    	} else {
    		currentState = "";
    	}
    }
    
  	/** Handle change in selection of field row
	 */
    private function handleFieldChange (evt:Event):void {
    	trace("HandleFieldChange selected=" + multislotGrid.selectedIndex);
    	reactToFieldChange();
    }
    
    /** Handle selected row change on the multiSlotGrid
    */
    private function reactToFieldChange():void {
		var enable:Boolean = (multislotGrid.selectedIndex != -1);
		removeFieldButton.enabled = enable;
		fieldTypeForm.enabled = enable;
	} 
	
	/** Add a new field row and set the editor for it.
	 */
	private function addField():void {
		
		var field:MeasurementScale = new MeasurementScale();
		
		// Give the slot a 1-based index name as an initial value.
		var index:int = (myType as CompositeScale).variables.length + 1;
		/*field.nameValue = SLOT_PREFIX + index;
		(myType as KefedFullValueTemplate).multipleSlotFields.addItem(field);
		
		multislotGrid.selectedIndex = (myType as KefedFullValueTemplate).multipleSlotFields.length - 1;
		multislotGrid.scrollToIndex(multislotGrid.selectedIndex);*/
		
		reactToFieldChange();
		fieldTypeForm.variableDataNameControl.setFocus();
		fieldTypeForm.variableDataNameControl.setSelection(0,fieldTypeForm.variableDataNameControl.text.length);		
	}
	
	/** Generate a new field name that is not the same as an existing field name.
	 *  TODO:  Figure out if this is too general a solution.  Perhaps just using
	 *         Slot + index would work just as well.
	 *
	 *  @param template The value template that contains the table fields
	 *  @return The new field name
	 */
	private function newFieldName(template:MeasurementScale):String {
		var count:int = 1;
		var newName:String = SLOT_PREFIX + count++;
		/* TODO: Not sure what might be needed to convert this?
		while (template.getFieldTemplate(newName) != null) {
			newName = SLOT_PREFIX + count++;
		}*/
		return newName;
	}
	 
    /** Remove selected field row
    */
    private function removeField():void {
		var i:int = multislotGrid.selectedIndex;
		if (i >= 0) {
			(myType as CompositeScale).variables.removeItemAt(i);
			//  TODO: Adjust selected index to leave something selected.
			multislotGrid.selectedIndex = -1;
		}
		reactToFieldChange();
	}
	
	/** Return the type name (typeValue field) of the column's BaseValueTemplate object.
	 */
	private function getTypeName(item:Object, column:DataGridColumn):String {
		return (item as MeasurementScale).classType;
	}
	
	/** Handler to update a slot based on the value entered
	 *  into a text field
	 * 
	 * @param evt The event triggered by the textinput value change
	 * @param slotName The name of the slot to be updated
	 */
	private function updateValue(evt:Event, slotName:String):void {
		var input:TextInput = evt.target as TextInput;
		myType[slotName] = StringUtil.trim(input.text);
	}
	
	/** Hook to give us somewhere to place a break point.
	 */
	 private function doDebug():void {
	     var i:int = 3;
	 }
    
    /** Debugging aid */
    private function showEvent(evt:Event):void {
    	trace("Event " + evt + "  target=" + evt.target);
    }
    
 	]]>
</mx:Script>

	<mx:HBox id="typeItem" width="100%">
	    <!-- <mx:Label text="Type"/> -->
		<mx:ComboBox id="typeList"
			enabled="{!monotonic}" rowCount="9"
			selectedIndex="{typeOptions.getItemIndex(myType.classType)}"
			valueCommit="handleVariableTypeChange(event)">
			<mx:ArrayCollection id="typeOptions">
				<mx:Array>
					<!-- NEED TO CHANGE THESE SCORES TO REFLECT OOEVV TYPES -->
					<mx:String>True/False</mx:String>
					<mx:String>Integer</mx:String>
					<mx:String>Decimal</mx:String>
					<mx:String>Decimal with units</mx:String>
					<mx:String>Term</mx:String>
					<mx:String>Text</mx:String>
					<mx:String>Text List</mx:String>
					<mx:String>Long Text</mx:String>
					<mx:String>Region</mx:String>
					<mx:String>Date</mx:String>
					<mx:String>Time</mx:String>
					<mx:String>DateTime</mx:String>
					<mx:String>File</mx:String>
					<mx:String>Image</mx:String>
				</mx:Array>
			</mx:ArrayCollection>
		</mx:ComboBox>
	</mx:HBox>
		<!--
		<mx:Button label="Debug" click="doDebug();"/>
		-->
		
	<mx:states>
	<mx:State name="True_False_State">
		<mx:AddChild>
			<!-- Perhaps in future this could have True/False | Yes/No | Present/Absent as choices? -->
			<mx:Label text="No additional options" fontStyle="italic"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Date_State">
		<mx:AddChild>
			<mx:Label text="No additional options yet" fontStyle="italic"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Time_State">
		<mx:AddChild>
			<mx:Label text="No additional options yet" fontStyle="italic"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="DateTime_State">
		<mx:AddChild>
			<mx:Label text="No additional options yet" fontStyle="italic"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Image_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed Image File Patterns" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%"
				myType="{myType}"
				allowOtherValuesFlagName="allowFreePatternInput"
				monotonic="{monotonic}"/>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="File_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed File Patterns" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%"
				myType="{myType}"
				allowOtherValuesFlagName="allowFreePatternInput"
				monotonic="{monotonic}"/>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Term_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed Values" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%"
				myType="{myType}"
				allowOtherValuesFlagName="allowFreeValueInput"
				monotonic="{monotonic}"/>
			<mx:Spacer height="3"/>
			<mx:HBox width="100%">
				<mx:Label text="Name Lookup Field"/>
				<!--<mx:TextInput text="{myType.termLookupFunction}"
					change="updateValue(event, 'termLookupFunction');"
					toolTip="Field or function to use to get the ontology term from the name in the list."/>-->
			</mx:HBox>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Text_State">
		<mx:AddChild>
			<mx:Label text="No additional options yet" fontStyle="italic"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Text_List_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed Values" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%"
				myType="{myType}"
				allowOtherValuesFlagName="allowFreeValueInput"
				orderAllowed="true"
				monotonic="{monotonic}"/>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Long_Text_State">
		<mx:AddChild>
			<mx:Label text="No additional options yet" fontStyle="italic"/>
	</mx:AddChild>
	</mx:State>
	<mx:State name="Region_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed Region Names" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%" height="80%"
				myType="{myType}"
				allowOtherValues="true"
				allowOtherValuesFlagName="allowFreeValueInput"
				monotonic="{monotonic}"/>
			<mx:Spacer height="3"/>
			<mx:HBox width="100%">
				<mx:Label text="Lookup Function"/>
				<!--<mx:TextInput text="{myType.termLookupFunction}"
					change="updateValue(event, 'termLookupFunction');"-->
			</mx:HBox>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="String_State">
		<mx:AddChild>
		<mx:VBox width="100%">
			<mx:Label text="Allowed Values" fontWeight="bold"/>
			<ui:AllowedValuesListComponent width="100%"
				myType="{myType}"
				allowOtherValuesFlagName="allowFreeValueInput"
					monotonic="{monotonic}"/>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Integer_State">
		<mx:AddChild>
			<mx:VBox width="100%">
				<!--
				<mx:Label text="Allowed Values" fontWeight="bold"/>
				<ui:AllowedValuesListComponent width="100%"
					myType="{myType}"
					allowedValues="{myType.allowedValues}"
					allowOtherValuesFlagName="allowFreeValueInput"
					monotonic="{monotonic}"/>
					
				<mx:HBox width="100%">
					<mx:HBox width="50%">
						<mx:Label text="Minimum"/>
						<mx:TextInput id="minIntegerValue" text="{myType.minimumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'minimumValue');"/> 
					</mx:HBox>
					<mx:HBox width="50%">
						<mx:Label text="Maximum"/>
						<mx:TextInput id="maxIntegerValue" text="{myType.maximumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'maximumValue');"/> 
					</mx:HBox>
				</mx:HBox>-->
			</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Decimal_State">
		<mx:AddChild>
			<mx:VBox width="100%">
			   <!--
				<mx:Label text="Allowed Values" fontWeight="bold"/>
				<ui:AllowedValuesListComponent width="100%"
					myType="{myType}"
					allowedValues="{myType.allowedValues}"
					allowOtherValuesFlagName="allowFreeValueInput"
					monotonic="{monotonic}"/>
				<mx:HBox width="100%">
					<mx:HBox width="50%">
						<mx:Label text="Minimum"/>
						<mx:TextInput id="minDecimalValue" text="{myType.minimumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'minimumValue');"/> 
					</mx:HBox>
					<mx:HBox width="50%">
						<mx:Label text="Maximum"/>
						<mx:TextInput id="maxDecimalValue" text="{myType.maximumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'maximumValue');"/> 
					</mx:HBox>
				</mx:HBox>-->
			</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Decimal_with_units_State">
		<mx:AddChild>
			<mx:VBox width="100%" height="100%">
				<!--<mx:HBox width="100%">		
					<mx:HBox width="50%">
						<mx:Label text="Minimum"/>
						<mx:TextInput id="minUnitValue" text="{myType.minimumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'minimumValue');"/> 
					</mx:HBox>
					<mx:HBox width="50%">
						<mx:Label text="Maximum"/>
						<mx:TextInput id="maxUnitValue" text="{myType.maximumValue}" width="{FIELD_WIDTH}"
							change="updateValue(event, 'maximumValue');"/> 
					</mx:HBox>
				</mx:HBox>-->
				<mx:Spacer height="6"/>
				<mx:Label text="Allowed Units" fontWeight="bold"/>
				<ui:AllowedValuesListComponent width="100%" height="80%"
					myType="{myType}"
					allowOtherValuesFlagName="allowFreeUnitInput"
					monotonic="{monotonic}"/>
				<!--
				<mx:Label text="Allowed Values" fontWeight="bold"/>
				<ui:AllowedValuesListComponent width="100%"
					myType="{myType}"
					allowedValues="{myType.allowedValues}"
					allowOtherValuesFlagName="allowFreeValueInput"
					monotonic="{monotonic}"/>
					-->
			</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="Table_State">
		<mx:AddChild>
		<mx:VBox width="100%" height="100%">
		    <mx:DataGrid id="multislotGrid" name="MultislotGrid"
		    		 width="100%" height="30%" minHeight="65" editable="false"
		    		dataProvider="{(myType as CompositeScale).variables}"
		    		change="handleFieldChange(event)">
		    	<mx:columns>
		    		<mx:DataGridColumn headerText="Name" dataField="nameValue"/>
		    		<mx:DataGridColumn headerText="Terms" dataField="ontologyIds"/>
		    		<mx:DataGridColumn headerText="Type" dataField="valueType" labelFunction="getTypeName"/>
		    	</mx:columns>
		    </mx:DataGrid>
			<mx:HBox width="100%" enabled="{!monotonic}">
				<mx:Button id="addFieldButton" label="Add" click="addField();" />
				<!-- <mx:Button id="editFieldButton" label="Edit" click="editField();" /> -->
				<mx:Spacer width="10"/>
				<mx:Button id="removeFieldButton" label="Remove" click="removeField();"/>
			</mx:HBox>
			<mx:Spacer height="10"/>
			<ui:FieldTemplateTabs id="fieldTypeForm" width="100%" height="65%" minHeight="120"
								  myObject="{VariableInstance(multislotGrid.selectedItem)}"
								  monotonic="{monotonic}"
								  enabled="{multislotGrid.selectedItem != null}"/>
		</mx:VBox>
		</mx:AddChild>
	</mx:State>
</mx:states>

</mx:VBox>
