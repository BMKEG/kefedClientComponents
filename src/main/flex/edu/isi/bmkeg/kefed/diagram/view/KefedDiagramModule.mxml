<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: DesignerComponent.mxml 2500 2011-06-17 00:00:05Z tom $ 
     $Date: 2011-06-16 17:00:05 -0700 (Thu, 16 Jun 2011) $
     $Revision: 2500 $ -->
<mx:Module height="100%" width="100%" 
		   xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   implements="org.robotlegs.utilities.modular.core.IModule"
		   xmlns:kapit="fr.kapit.*" 
		   xmlns:components="fr.kapit.components.*" 
		   xmlns:tree="fr.kapit.tree.*"
		   xmlns:diagctl="com.kapit.diagram.controls.*" 
		   xmlns:diagview="com.kapit.diagram.view.*"                
		   xmlns:TDF="fr.kapit.tourdeflex.*"
		   xmlns:local="edu.isi.bmkeg.kefed.diagram.view.*"
		   preinitialize="DiagramMappings.initializeMappings();"
		   initialize="init();">
	
	<fx:Declarations>
		<fx:Model id="license" source="licenses.xml"/>
	</fx:Declarations>
	
	<fx:Script>
    <![CDATA[

		import com.kapit.diagram.DiagramEvent;
		import com.kapit.diagram.controls.SVGIcon;
		import com.kapit.diagram.layouts.utils.Constants;
		import com.kapit.diagram.model.DiagramModel;
		import com.kapit.diagram.proxies.DiagramProxy;
		import com.kapit.diagram.proxies.KDLProxy;
		import com.kapit.diagram.view.DiagramObject;
		import com.kapit.diagram.view.DiagramSprite;
		
		import edu.isi.bmkeg.kefed.diagram.KefedDiagramContext;
		import edu.isi.bmkeg.kefed.diagram.controller.events.*;
		import edu.isi.bmkeg.kefed.diagram.controller.events.ChangeZoomEvent;
		import edu.isi.bmkeg.kefed.diagram.controller.events.ShowKefedSvgEvent;
		import edu.isi.bmkeg.kefed.model.flare.FlareGraph;
		import edu.isi.bmkeg.kefed.diagram.utils.UiUtil;
		import edu.isi.bmkeg.kefed.diagram.view.kapit.DiagramMappings;
		import edu.isi.bmkeg.kefed.diagram.view.kapit.FlareLinkProxy;
		import edu.isi.bmkeg.kefed.diagram.view.kapit.FlareNodeProxy;
		
		import mx.core.IVisualElementContainer;
		import mx.events.SliderEvent;
		
		import org.robotlegs.core.IContext;
		import org.robotlegs.core.IInjector;
		import org.robotlegs.utilities.modular.core.IModule;
		import org.robotlegs.utilities.modular.core.IModuleContext;

		protected var context:IModuleContext;
		
		// added to overcome 'class not found errors'
        private var hackFix1:FlareNodeProxy;
        private var hackFix2:FlareLinkProxy;
		
		public var _proxy:DiagramProxy;
		
		private function init():void {
			UiUtil.agreeToLicense(license.key, license.license);
		}
		
		public function initDiagram():void
        {
             _proxy = new KDLProxy(diagram);
            diagram.multipanel=false;
            diagram.selectionenabled=true;
            diagram.keyboardenabled=true;
            diagram.dragenabled=true;
            diagram.dropenabled=true;
            var sprites:Array = [];
			
			diagram.model = new DiagramModel(DiagramMappings.getDiagramMappings());
			
			if( diagram != null && _proxy != null) {
	            _proxy.importGraph();
	            _proxy.exportGraph(Constants.RADIAL_LAYOUT);
	  		}	
			
			FlareNodeProxy._kefedDiagramView = this;
			FlareLinkProxy._kefedDiagramView = this;
			
			zoomControl.value = 1.0;

			diagram.addEventListener(DiagramEvent.SELECTION_CHANGED, handleDiagramSelectionChanged);
//			diagram.addEventListener(DiagramEvent.DIAGRAM_ZOOM_MODE_SET, traceEvent);
//			diagram.addEventListener(DiagramEvent.DIAGRAM_MODIFIED, traceEvent);
//			diagram.addEventListener(DiagramEvent.ELEMENT_RESIZE_FINISHED, traceEvent);
			
            diagram.deselectAll();
			
		}
        
        private function traceEvent(event:Event):void {
        	trace("Event ",event);
        }
		
		private function showSVG(event:MouseEvent):void {
			var svg:XML = diagram.toSVG();
			var ev:ShowKefedSvgEvent = new ShowKefedSvgEvent(svg);
			this.dispatchEvent(ev);
		}

		private function handleZoomControlChanged(event:SliderEvent):void {
			var ev:ChangeZoomEvent = new ChangeZoomEvent(event.value);
			this.dispatchEvent(ev);
		}	

		private function handleResetZoomClick(event:MouseEvent):void {
			var ev:ChangeZoomEvent = new ChangeZoomEvent(1.0);
			this.dispatchEvent(ev);
		}	
		
		private function saveLayout(event:MouseEvent):void {
			var xml:XML = diagram.toXML();			
			var ev:UpdateKapitXmlEvent = new UpdateKapitXmlEvent(xml, new Date());
			this.dispatchEvent(ev);
		}	
		
		private function handleDiagramSelectionChanged(e:DiagramEvent):void
		{
			var arr:Array = diagram.getSelectedObjects();
			var uid:String = null;
			var type:String = null;
			if( arr && arr.length == 1 ) { 
				var dObj:DiagramObject = DiagramObject(arr[0]);
				uid = dObj.did;
				this.dispatchEvent( new SelectFlareNodeInDiagramEvent(uid) );
			}			
		}
		
		/**
		 * We need to initialize our context by setting the parent
		 * injector for the module. This is actually injected by the
		 * shell, so no need to worry about it!
		 */
		[Inject]
		public function set parentInjector(value:IInjector):void
		{
			context = new KefedDiagramContext(this,value);
		}
 
		public function dispose():void
		{
			if(parent && parent.contains(this))
				IVisualElementContainer(parent).removeElement(this);
			context.dispose();
			context = null;    
		}	
		
    ]]>
    
	</fx:Script>
		
	<mx:VBox width="100%" height="100%" >                
			
		<mx:HBox width="100%" height="30" verticalAlign="middle" >
		
			<mx:Label text=" Zoom: "/>
			<mx:HSlider id="zoomControl" minimum="0" maximum="1.7" 
						 change="handleZoomControlChanged(event)"/>
		    <mx:Button label="Reset Zoom" click="handleResetZoomClick(event)"/>
		    <mx:Button label="SVG" click="showSVG(event)" enabled="{zoomControl.value == 1}"
		    	toolTip="Show SVG code for diagram.  Zoom control must be at 1."/>
			<mx:Button label="Save Layout" click="saveLayout(event)"
					   toolTip="Save this layout in the Database."/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" verticalAlign="middle" >
			<local:KapitDiagramView width="100%" 
									height="100%" 
									id="diagram" 
									creationComplete="initDiagram();">
	        </local:KapitDiagramView>
		</mx:HBox>
	</mx:VBox>
	
</mx:Module>
