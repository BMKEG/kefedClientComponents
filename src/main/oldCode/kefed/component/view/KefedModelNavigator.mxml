<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: KefedModelNavigator.mxml 38 2011-03-18 05:41:28Z taruss2000@gmail.com $ 
     $Date: 2011-03-17 22:41:28 -0700 (Thu, 17 Mar 2011) $
     $Revision: 38 $ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="edu.isi.bmkeg.kefed.component.view.ui.*"
	width="100%" height="100%" 
    paddingTop="0" paddingBottom="0" 
    paddingLeft="0" paddingRight="0"
    preinitialize="DiagramMappings.initializeMappings();"
	initialize="init();" 
	creationComplete="processRequest('loadModel',modelUid)"
	viewSourceURL="srcview/index.html">

	<mx:XML id="configuration" source="/edu/isi/bmkeg/kefed/component/configuration.xml"/>
	<mx:Model id="license" source="/edu/isi/bmkeg/kefed/component/licenses.xml"/>
	
	<mx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.component.view.ui.UiUtil;
			import mx.controls.Alert;
			import mx.utils.URLUtil;
			import mx.rpc.events.FaultEvent;

			import edu.isi.bmkeg.kefed.component.view.ui.kapit.DiagramMappings;
			import edu.isi.bmkeg.kefed.component.view.store.persevere.PersevereModelStore;
			import edu.isi.bmkeg.kefed.component.view.store.ModelStoreEvent;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedModel;
			import edu.isi.bmkeg.kefed.component.view.store.IModelStore;
			import edu.isi.bmkeg.utils.Parameters;
		
		
			[Bindable]
			public var modelStore:IModelStore = null;
			
			[Bindable]
			public var model:KefedModel;
			
			[Bindable]
			public var callbackFunction:String;
			
			[Bindable]
			public var errorMessage:String;
			
			[Bindable]
			public var zoomFactor:Number=0.5;
			
			public var serverUrl:String;
			public var config:Parameters;

			private var version:String = "$Revision: 38 $";
			private var modelUid:String = null;
			
			private function init():void {
				UiUtil.agreeToLicense(license.key, license.license);
				if (serverUrl==null) {
					serverUrl = URLUtil.getProtocol(this.url) + "://"
				 	         + URLUtil.getServerNameWithPort(this.url) + "/";
				}
		
				config = new Parameters(configuration);
				callbackFunction = config.getValue("callbackFunction", null);
				modelUid = config.getValue("uid", null);
				
				var modelStoreUrl:String = config.getValue("modelStoreUrl", "persevere/KefedModel");
				modelStoreUrl = URLUtil.getFullURL(serverUrl, modelStoreUrl);
				modelStore = new PersevereModelStore(modelStoreUrl);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleModelLoad);
				modelStore.addEventListener(FaultEvent.FAULT, handleModelStoreFault);
			}
			
			/** Process the given request with the supplied UID.
			 *  Current actions supported are
			 *      loadModel
			 * 
			 * @param action The action to take.
			 * @param uid The uid on which to execute the action
			 * @param zoom The zoom level to set.  Defaults to 0.5.
			 */
			public function processRequest(action:String, uid:String, zoom:Number=0.5):void {
				if (action == "loadModel") {
					if (uid != null) {
						modelUid = uid;
						cursorManager.setBusyCursor();
						modelStore.retrieveModel(uid);
						zoomFactor = zoom;
					} else {
						errorMessage = "Received action " + action + " without a UID.";
						trace(errorMessage);
						doErrorCallback("IllegalArgument", errorMessage); 
					}
				} else {
					errorMessage = "Received unsupported action " + action;
					trace(errorMessage);
					doErrorCallback("IllegalArgument", errorMessage); 
				}
			}
			
			private function handleModelStoreFault(event:FaultEvent):void {
	  			errorMessage = "ModelStore: " + event.message.toString();
	  			trace(errorMessage);
	  			Alert.show(errorMessage);
	  			doErrorCallback("ModelStoreError", event.message.toString());
	  		}
		
			/** 
			 *   Handle loading of model and dispathc to the appropriate
			 *   action for create, edit or delete
			 */
			private function handleModelLoad(e:ModelStoreEvent):void {
				cursorManager.removeBusyCursor();
				trace("Model loaded: " + e.model + " modelName=" + ((e.model == null) ? "" : e.model.modelName));
				
				if (e.model == null) {
					trace("Couldn't find model with uid " + modelUid);
					Alert.show("Couldn't find model with uid " + modelUid);
					doErrorCallback("ModelNotFound", "Model " + modelUid + " not found.");
				} else {
					this.model = e.model;
					currentState = "Navigate_State";
					navigator.loadModel(this.model);
				}
			}
		
			/** Invoke the callbackFunction with an error type and message.
			 * 
			 * @param errorType The type of error
			 * @param errorMessage A more informative message about the error
			 */
			 private function doErrorCallback (errorType:String, errorMessage:String):void {
			 	UiUtil.doCallback(callbackFunction, null, {action:"error",
			 											   uid:null,
			 											   type:null,
			 											   zoom:null,
			 											   error:errorType,
			 											   errorMessage:errorMessage});
//			 	var allParameters:String = "action=error&uid=null&type=null&zoom=null" 
//			 								+ "&error=" + encodeURIComponent(errorType)
//	                                  		+ "&errorMessage=" + encodeURIComponent(errorMessage);
//   			    if (callbackFunction != null && ExternalInterface.available) {
// 			    	trace("Making JavaScript call");
// 			      	ExternalInterface.call(callbackFunction, allParameters);
//   			    }
			 }
			 
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="Navigate_State">
			<mx:RemoveChild target="{information}"/>
			<mx:AddChild relativeTo="{top}">
				<ui:ModelNavigationComponent label="Navigator" id="navigator" height="100%" width="100%"
						 callbackFunction="{callbackFunction}"  zoomFactor="{zoomFactor}"/>
			</mx:AddChild>	
		</mx:State>
   </mx:states>
   
   <mx:VBox id="top" height="100%" width="100%">
   	  <ui:CreditBox id="information" height="100%" width="100%"
   	  	   	 errorMessage="{errorMessage}"
	   	  	 componentName="Navigator" additionalDeveloper1="Montana State University"/>
   </mx:VBox>
	
</mx:Application>
