<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: PersevereDataForm.mxml 2490 2011-06-15 23:55:41Z tom $ 
     $Date: 2011-06-15 16:55:41 -0700 (Wed, 15 Jun 2011) $
     $Revision: 2490 $ -->
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" 
		preinitialize="preinit();"
		width="100%" height="100%">
		
	<mx:Script>
    <![CDATA[
    	import edu.isi.bmkeg.kefed.component.view.store.DataStoreEvent;
    	import edu.isi.bmkeg.kefed.component.view.store.ModelStoreEvent;
    	import edu.isi.bmkeg.kefed.component.view.store.IModelStore;
    	import edu.isi.bmkeg.kefed.component.view.store.IDataStore;
    	import edu.isi.bmkeg.kefed.component.view.elements.KefedExperiment;
    	import edu.isi.bmkeg.kefed.component.view.store.json.JSONSerializer;
		import edu.isi.bmkeg.kefed.component.view.ui.UiUtil;
    	import flare.vis.operator.layout.IndentedTreeLayout;
        
        import edu.isi.bmkeg.kefed.component.view.app.KefedAppEvent;
        import edu.isi.bmkeg.kefed.component.view.app.KefedAppEventDispatcher;
		
		import edu.isi.bmkeg.kefed.component.view.elements.KefedObject;
		import edu.isi.bmkeg.kefed.component.view.elements.KefedModel;
		import edu.isi.bmkeg.kefed.component.view.elements.KefedPersevereEvent;
		import edu.isi.bmkeg.kefed.component.view.elements.KefedPersevereInterface;
		import edu.isi.bmkeg.kefed.component.view.ui.DataEntryEditorFactory;		

		import flare.analytics.graph.LinkDistance;
//		import flare.vis.data.Data;
//		import flare.vis.data.DataList;
		import flare.vis.data.NodeSprite;

		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		
		import mx.core.FlexGlobals;
		import mx.events.DataGridEvent;
		import mx.events.FlexEvent;
		import mx.events.SliderEvent;
		import mx.events.ListEvent;

		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;

		[Bindable]
		private var jsonCode:String = "";

		[Bindable]
		public var myObject:KefedObject;

		[Bindable]
		public var templateList:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		public var modelStore:IModelStore;
		
		[Bindable]
		public var dataStore:IDataStore;

       	private var typeUid:String = "";
		private var dataTable:ArrayCollection;
		private var vbHash:Object;
		private var pos:int;
       	
        public function preinit():void {
        	modelStore.addEventListener(ModelStoreEvent.LIST, handleListModel);
        	modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadModel);
        	modelStore.addEventListener(FaultEvent.FAULT, callError);
        	
        	dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertData);

			modelStore.listModels();
	    }
    	    	    
		private function runUpload():void {
			modelStore.retrieveModel(typeUid);
		}
		
		private function handleLoadModel(e:ModelStoreEvent):void {
			
			var model:KefedModel = e.model;
			var experiment:KefedExperiment = new KefedExperiment(model, true);
			
			// This is broken.  It doesn't conform to the new format for Experimental
			// data, so it will need to be redefined.
			throw new Error("This part of the code is broken and shouldn't be called!");
			
        	var ss:String = this.dataBox.text;    
        	var re:RegExp = /[\n\r]+/;
        	var lines:Array = ss.split(re);
        	var vbNames:Array = lines[0].split("\t");
        	
        	vbHash = new Object();
        	dataTable = new ArrayCollection();
        	
        	for(var i:int=2; i<vbNames.length; i++) {
        		vbHash[vbNames[i]] = new Object();
        	}
        	
        	var source:String = ""; 
        	var label:String = ""; 
        	for(i=1; i<lines.length; i++) {
        		var line:String = lines[i];
        		if(line.length == 0) {
        			continue;
        		}
        		var fields:Array = line.split("\t");
        		 
        		var row:Object = new Object();
        		
        		row.source = fields[0]; 
        		row.label = fields[1]; 
        		 
        		for(var j:int=2; j<fields.length; j++) {
        			var field:String = fields[j];
        			var fieldName:String = vbNames[j];
        			row[fieldName] = field;
        			vbHash[fieldName][field] = -1;
        		}
        		
        		dataTable.addItem(row);
        		
        	}
        	
			var start:int = 0;
			
			if( start == dataTable.length || start > dataTable.length) 
				return;
  			
  			source = dataTable[start].source;
  			label = dataTable[start].label;
  			
  			var end:int = start;
  			FIND_END_LOOP: while(end<dataTable.length) {
  				if(dataTable[end].label != label) {
  					break FIND_END_LOOP;	
  				}
  				end++;
  			}	
  			
  			for (var v:* in vbHash ) {
				vbHash[v] = new Object();
			}

  			var indepVbArray:ArrayCollection = model.getParameters();
  			for(i=0; i<indepVbArray.length; i++) {
  				var indepVb:KefedObject = indepVbArray[j]; 
  				indepVb.oldDataTable = new ArrayCollection();
			}
	  		
  			var depVbArray:ArrayCollection = model.getMeasurements();
        	for( i=0; i<depVbArray.length; i++) {
	  			var depVb:KefedObject = depVbArray[i];
	  			indepVbArray = model.getParametersForMeasurement(depVb);

				var dt:ArrayCollection = new ArrayCollection();
	        	for( var pos:int=start; pos<end; pos++) {
					 row = dataTable[pos];
					var o:Object = new Object();
					
					for(j=0; j<indepVbArray.length; j++) {
						indepVb = indepVbArray[j]; 
						o[indepVb.nameValue] = row[indepVb.nameValue];
						vbHash[indepVb.nameValue][row[indepVb.nameValue]] = -1;
					}
					o.value = row[depVb.nameValue];				
		        	dt.addItem(o);
	        	}
	        	depVb.oldDataTable = dt;

  			}
  			
  			// Set up the values of independent variables
  			indepVbArray = model.getParameters();
    	    for( j=0; j<indepVbArray.length; j++ ) {
				indepVb = indepVbArray[j];
				for (v in vbHash[indepVb.nameValue] ) {
					o = new Object();
					o.value = v;
					indepVb.oldDataTable.addItem(o);		
				}
			}  
  			
  			this.pos = end;
        	dataStore.insertData(experiment);
		}
		

		private function handleInsertData(e:KefedPersevereEvent):void {
			jsonCode="";
			Alert.show("Data uploaded.");							
		}
	
	
		private function callError(e:FaultEvent):void {
			Alert.show(UiUtil.getFaultURL(e) + "\n" + e.message.toString());				
		}
	    
	    private function cancel():void {
			FlexGlobals.topLevelApplication.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.CANCEL_DATA_EDIT);				
			FlexGlobals.topLevelApplication.currentState = "Dashboard_State";				
		}
	   	
	   	private function handleListModel(event:ModelStoreEvent):void {
			this.templateList = event.modelList;			
		}
			
		private function changeType(): void {
			var o:Object = selectType.selectedItem;
			this.typeUid = o.uid;	
		}
	    	    
    ]]>
    </mx:Script>

	<mx:FormHeading label="Generic Batch Upload Interface"/>
	<mx:FormItem direction="horizontal" height="100%" width="100%">
		<mx:TextArea id="dataBox" text="{this.jsonCode}" height="100%" width="100%"/> 
	</mx:FormItem>
	<mx:FormItem>
		<mx:HBox>						
			<mx:ComboBox id="selectType" labelField="modelName" change="changeType();" dataProvider="{templateList}"/>				
			<mx:Button label="Upload Data" click="runUpload();"/>
			<mx:Button label="Cancel" click="cancel();"/>
		</mx:HBox>
	</mx:FormItem>

</mx:Form>
