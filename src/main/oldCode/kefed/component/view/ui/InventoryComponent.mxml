<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: InventoryComponent.mxml 2665 2011-07-26 17:21:16Z tom $ 
     $Date: 2011-07-26 10:21:16 -0700 (Tue, 26 Jul 2011) $
     $Revision: 2665 $ -->
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:grid="edu.isi.bmkeg.utils.CheckBoxDataGrid.*"
	width="100%" height="100%"
	preinitialize="init();"
    addedToStage="refresh()" 
	xmlns:ui="edu.isi.bmkeg.kefed.ui.*" xmlns:ui1="edu.isi.bmkeg.kefed.component.view.ui.*">

    <mx:Script>
	<![CDATA[
		import edu.isi.bmkeg.kefed.component.KefedComponent;
		import edu.isi.bmkeg.kefed.component.view.app.KefedAppEvent;
		import edu.isi.bmkeg.kefed.component.view.app.KefedAppEventDispatcher;
		import edu.isi.bmkeg.kefed.component.view.elements.KefedExperiment;
		import edu.isi.bmkeg.kefed.component.view.elements.KefedModel;
		import edu.isi.bmkeg.kefed.component.view.store.DataStoreEvent;
		import edu.isi.bmkeg.kefed.component.view.store.IDataStore;
		import edu.isi.bmkeg.kefed.component.view.store.IModelStore;
		import edu.isi.bmkeg.kefed.component.view.store.ModelStoreEvent;
		import edu.isi.bmkeg.kefed.component.view.store.events.*;
		import edu.isi.bmkeg.kefed.component.view.store.json.JSONSerializer;
		import edu.isi.bmkeg.kefed.component.view.store.json.YogoSerializer;
		import edu.isi.bmkeg.kefed.component.view.store.persevere.PersevereDataStore;
		import edu.isi.bmkeg.kefed.component.view.store.persevere.PersevereModelStore;
		import edu.isi.bmkeg.kefed.component.view.store.persevere.YogoModelStore;
		
		import flare.vis.operator.layout.IndentedTreeLayout;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.core.IFlexDisplayObject;
		import mx.events.CloseEvent;
		import mx.managers.CursorManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.FaultEvent;

		public var kefedComp:KefedComponent;
		
		[Bindable]
		public var modelStore:IModelStore;
		
		[Bindable]
	    public var schemaStore:IModelStore = null;
	    
	    [Bindable]
     	public var dataStore:IDataStore; 
		
		[Bindable]
		private var templateList:ArrayCollection;
		
		[Bindable]
		public var ontologyList:ArrayCollection;

		[Bindable]
		private var template:KefedModel;

		[Bindable]
		private var experimentList:ArrayCollection;
		
		[Bindable]
		private var experiment:KefedExperiment;
		
		[Bindable]
		private var designCountText:String = "0 designs";
		
		[Bindable]
		private var experimentCountText:String = "0 experiments";
				
		/** File references used for importing and exporting models or experiments.
		 *   Needs to be a field so that the scope is maintained
		 *   across multiple method calls.  Just extracting the
		 *   value from the Event's target fails.
		 */
		private var importFileRef:FileReference = null;
		private var exportFileRef:FileReference = null;


		private var deletePopup:ConfirmDeleteDialog;
		// TODO:  Unify naming.  This is a bit incoherent at the moment because
		//        the old nomenclature was Template and Model and the new names
		//        are Model and Experiment.
		private var newDesignPopup:NewKefedTemplateDialog;
		private var newExperimentPopup:NewKefedExperimentDialog;
		
		// Flags to control behavior of the selection lists after they
		// have been refreshed.  If this is true, then the last item
		// in the list is selected.  This will be set true after adding
		// a new item, so it can be immediately selected for editing.
		private var selectLastModel:Boolean = false;
		private var selectLastExperiment:Boolean = false;

    	public function init():void {
    		
			this.kefedComp = KefedComponent(this.parent);
			this.kefedComp.addEventListener(KeyboardEvent.KEY_DOWN, checkKeys);
    		
    		modelStore.addEventListener(ModelStoreEvent.LIST, handleListKefedTemplates);
    		modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
    		modelStore.addEventListener(ModelStoreEvent.DELETE, handleDeleteKefedTemplate);
    		modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
    		modelStore.addEventListener(ModelStoreEvent.SAVE, handleSaveKefedTemplate);
    		modelStore.addEventListener(FaultEvent.FAULT, callError);

    		dataStore.addEventListener(DataStoreEvent.LIST, handleListKefedExperiments);
    		dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
    		dataStore.addEventListener(DataStoreEvent.DELETE, handleDeleteKefedExperiment);
    		dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
    		dataStore.addEventListener(DataStoreEvent.SAVE, handleSaveKefedExperiment);
    		dataStore.addEventListener(FaultEvent.FAULT, callError);
    		    		    		
    		var ed:EventDispatcher = this.kefedComp.eventDispatcher;
			ed.addEventListener(KefedAppEvent.SAVE_DATA_EDIT, saveEditedExperiment);
			ed.addEventListener(KefedAppEvent.SAVE_DESIGN_EDIT, saveEditedModel);	
			ed.addEventListener(KefedAppEvent.CANCEL_DESIGN_EDIT, returnToDashboard);
			ed.addEventListener(KefedAppEvent.CANCEL_DATA_EDIT, returnToDashboard);
					
		}

		private function checkKeys(e:KeyboardEvent):void {
			
			if( e.charCode == 20) { // Control-T
				this.kefedComp.currentState = "Dashboard_State";
			} else if (e.charCode == 10) { // Control-J
				this.kefedComp.currentState = "JSONform";
			} else if (e.charCode == 14 ) { // Control-N
				this.kefedComp.currentState = "Connectivity_State";
			} else if (e.charCode == 16 ) { // Control-P
				this.kefedComp.currentState = "PowerLoomForm";
			}
		}

    	public function refresh(e:Event=null):void {

			CursorManager.setBusyCursor();
			//modelStore.listModels();
			
			var e2:TriggerListKefedModelsEvent = new TriggerListKefedModelsEvent(0,100,"", true);
			dispatchEvent( e2 );

			CursorManager.setBusyCursor(); // Set again, since each handler pops one.
    		//dataStore.listData();		

			var e3:TriggerListKefedDataEvent = new TriggerListKefedDataEvent(0,100,"", true);
			dispatchEvent( e3 );
		
		}
    	
    	/** Respond to changes in the template selection window by
    	 *  enabling and disabling the action buttons that require a
    	 *  selection.
    	 * 
    	 *  TODO: Should this change be coordinated with the models
    	 *  displayed in the experiment window?  It would seem that 
    	 *  might make the display a bit more scalable, especially if
    	 *  there end up being a lot of experiments of a particular type.
    	 *  Perhaps make that a user-selectable option? 
    	 *
    	 * @param evt The event
    	 */
    	private function handleTemplateChange (evt:Event):void {
    		if (templateGrid != null) {
	    		var enable:Boolean = (templateGrid.selectedIndex != -1);
	    		copyDesignButton.enabled = enable;
	    		editDesignButton.enabled = enable;
	    		deleteDesignButton.enabled = enable;
				exportDesignButton.enabled = enable;
	    		}	
    	}

   		/** Respond to changes in the model/data selection window by
    	 *  enabling and disabling the action buttons that require a
    	 *  selection
    	 *
    	 * @param evt The event
    	 */
    	private function handleExperimentChange (evt:Event):void {
    		if (experimentGrid != null) {
	    		var enable:Boolean = (experimentGrid.selectedIndex != -1);
	    		copyExperimentButton.enabled = enable;
	    		editExperimentButton.enabled = enable;
	    		deleteExperimentButton.enabled = enable;
				exportExperimentButton.enabled = enable;
   		}
    	}

		
		/**
		 * New Templates
		 */
		private function newTemplate():void {			
			newDesignPopup = PopUpManager.createPopUp(this, NewKefedTemplateDialog, true) as NewKefedTemplateDialog;
	        newDesignPopup.title = "Create new KEfED Design";
			newDesignPopup.addEventListener(CloseEvent.CLOSE, closeNewTemplateDialog);
			newDesignPopup.OkButton.addEventListener(MouseEvent.CLICK, insertNewTemplate);
			newDesignPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewTemplateDialog);
			mx.managers.PopUpManager.centerPopUp(newDesignPopup);
		}
		
		private function insertNewTemplate(e:Event):void {
			if (newDesignPopup.Name.text != null && newDesignPopup.Name.text != "") {
				CursorManager.setBusyCursor();
				var model:KefedModel = new KefedModel();
				model.type = "template";
				model.modelName = newDesignPopup.Name.text;
				model.source = newDesignPopup.Source.text;
				model.citeKey = newDesignPopup.Citation.text;
				model.description = newDesignPopup.Description.text;
				model.updateTime();
				modelStore.insertModel(model);
				selectLastModel = true;
			}
			closeNewTemplateDialog(e);
		}
		
		private function closeNewTemplateDialog(e:Event):void {
			mx.managers.PopUpManager.removePopUp(newDesignPopup);
		}
		
		private function handleInsertKefedTemplate(e:ModelStoreEvent):void {
			trace("Insert Template Handler");
			modelStore.listModels();
		}

		/**
		 * Delete a Template
		 */
		private function deleteTemplate():void {	
			
			deletePopup = ConfirmDeleteDialog(
					PopUpManager.createPopUp(this, ConfirmDeleteDialog, true));
					
			deletePopup.addEventListener("close", cancelDeleteTemplate);
            deletePopup["cancelButton"].addEventListener("click", cancelDeleteTemplate);   
            deletePopup["okButton"].addEventListener("click", confirmDeleteTemplate); 
			mx.managers.PopUpManager.centerPopUp(deletePopup);		
			
		}

		private function confirmDeleteTemplate(event:MouseEvent):void {	
			
			PopUpManager.removePopUp(deletePopup);
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			
			var e:TriggerDeleteKefedModelEvent = new TriggerDeleteKefedModelEvent(uid, true);
			dispatchEvent( e );

			//modelStore.deleteModel(uid);
		
		}

		private function cancelDeleteTemplate(event:MouseEvent):void {	
			PopUpManager.removePopUp(deletePopup);
		}

		private function handleDeleteKefedTemplate(e:ModelStoreEvent):void {
			modelStore.listModels();
		}
		
		/**
		 * Copy a Template
		 */
		private function copyTemplate():void {
			// Copy a template by reading it in, and then using the handler to
			// make a clone and insert it into the store.
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedTemplate);
			
			//modelStore.retrieveModel(uid);
			var e1:TriggerRetrieveKefedModelEvent = new TriggerRetrieveKefedModelEvent(uid, true);
			this.dispatchEvent(e1);
		}
		
		private function handleCopyKefedTemplate (e:ModelStoreEvent):void {
			trace("Copy template handler",e," model=",e.model);
			var model:KefedModel = e.model.clone();
			model.modelName = model.modelName + " copy";
			model.updateTime();
			model.updateUID();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			modelStore.insertModel(model);
			selectLastModel = true;
		}

		/**
		 * Edit a Template
		 */
		private function editTemplate():void {
			var i:int = templateGrid.selectedIndex;
			// Sometimes a double click will be registered in response to
			// double clicks with a modifier key down.
			// cause a selection on the first click, followed by a de-selection
			// on the second click. 
			// Also, double clicks for sorting in the headers also trigger 
			// the double-click linked editing function.
			// So we make sure that we really have a 
			// selected item before we actually try to get it.  - tar
			if (i > -1) {
				var o:Object = templateList[i];
				var uid:String = o.uid;
				trace("Load model from uid",uid);
				CursorManager.setBusyCursor();
				
				//modelStore.retrieveModel(uid);
				var e1:TriggerRetrieveKefedModelEvent = new TriggerRetrieveKefedModelEvent(uid, true);
				this.dispatchEvent(e1);
				//trace("Finished loading call",uid);
			}
		}
		
		private function handleListKefedTemplates(e:ModelStoreEvent):void {
			// trace("Handle List Templates");
			CursorManager.removeBusyCursor();
			this.templateList = e.modelList;
			if (this.templateList.length == 1) {
				this.designCountText = "1 design";
			} else {
				this.designCountText = this.templateList.length + " designs";
			}
			if (selectLastModel) {
				templateGrid.selectedIndex = this.templateList.length - 1;
				templateGrid.scrollToIndex(templateGrid.selectedIndex);
				selectLastModel = false;
			}
			handleTemplateChange(e);		
		}		

		private function handleLoadKefedTemplate(e:ModelStoreEvent):void {
			trace("Load template handler",e," model=",e.model);
			CursorManager.removeBusyCursor();
			this.template = e.model;
			
			this.kefedComp.currentState = "Design_State";
			this.kefedComp.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.EDIT_DESIGN, this.template);
			
		}
		
		private function saveEditedModel(e:Event):void {
			CursorManager.setBusyCursor();
			this.template.updateTime();
			modelStore.saveModel(this.template);
			if (schemaStore != null) {
				schemaStore.saveModel(this.template);
			}
		}
		
		private function handleSaveKefedTemplate(e:ModelStoreEvent):void {
			CursorManager.removeBusyCursor();
			this.refresh();
		}
		
		/** 
		 * Import or Export templates
		 */
		private function exportTemplate(e:Event):void {
			var i:int = templateGrid.selectedIndex;
			if (i > -1) {
				var o:Object = templateList[i];
				var uid:String = o.uid;
				CursorManager.setBusyCursor();
				modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleExportKefedTemplate);
				
				//modelStore.retrieveModel(uid);
				var e1:TriggerRetrieveKefedModelEvent = new TriggerRetrieveKefedModelEvent(uid, true);
				this.dispatchEvent(e1);
				
				exportDesignButton.enabled = false;
			}
		}

		private function handleExportKefedTemplate (e:ModelStoreEvent):void {
			trace("Export template handler",e," model=",e.model);
			CursorManager.removeBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleExportKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			this.template = e.model;
			newDesignPopup = PopUpManager.createPopUp(this, NewKefedTemplateDialog, true) as NewKefedTemplateDialog;
			newDesignPopup.title = "Export this design";
			newDesignPopup.editable = false;
			newDesignPopup.Name.text = template.modelName;
			newDesignPopup.Source.text = template.source;
			newDesignPopup.Citation.text = template.citeKey;
			newDesignPopup.Description.text = template.description;
			newDesignPopup.addEventListener(CloseEvent.CLOSE, closeNewTemplateDialog);
			newDesignPopup.OkButton.addEventListener(MouseEvent.CLICK, exportCurrentTemplate);
			newDesignPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewTemplateDialog);
			mx.managers.PopUpManager.centerPopUp(newDesignPopup);			
		}
		
		private function exportCurrentTemplate (evt:Event):void {
			mx.managers.PopUpManager.removePopUp(newDesignPopup);
			exportFileRef = new FileReference();
			exportFileRef.addEventListener(Event.COMPLETE, exportTemplateCompleted);
			exportFileRef.addEventListener(Event.CANCEL, exportTemplateCanceled);
			var defaultFilename:String = template.modelName.replace(/ /g, "-") + ".json";
			exportFileRef.save(JSONSerializer.serializeKefedModel(template,false), defaultFilename);
		}

		
		private function exportTemplateCompleted(evt:Event):void {
			exportDesignButton.enabled = true;
			exportFileRef = null; // Release resources
		}
		
		private function exportTemplateCanceled(evt:Event):void {
			exportDesignButton.enabled = true;
			exportFileRef = null; // Release resources
		}
		
		private function importTemplate(e:Event):void {
			importFileRef = new FileReference();
			importFileRef.addEventListener(Event.SELECT, importFileSelected);
			importFileRef.addEventListener(Event.COMPLETE, importLoadCompleted)
			importFileRef.addEventListener(FaultEvent.FAULT, callError);
			importFileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			try {
				importFileRef.browse([new FileFilter("JSON Files", "*.json;*.txt")]);
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}
		
		private function importFileSelected(evt:Event):void {
			// trace("Selected, preparing to load. name=" + fileRef.name + " date=" + fileRef.creationDate);
			try {
				importFileRef.load();
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}
		
		private function importLoadCompleted(evt:Event):void {
			// trace("File size = " + fileRef.data.length);
			try {
				var jsonText:String = importFileRef.data.readMultiByte(importFileRef.data.length, "iso-8859-1");
				var m:KefedModel = JSONSerializer.deserializeKefedModel(jsonText);
				m.updateUID();
				modelStore.removeEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertImportedTemplate);
				CursorManager.setBusyCursor();
				
				//modelStore.insertModel(m);
				var e1:TriggerInsertKefedModelEvent = new TriggerInsertKefedModelEvent(m, true);
				this.dispatchEvent(e1);
				
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
			
			importFileRef=null; // To free data storage.
		}

		
		private function handleInsertImportedTemplate(evt:Event):void {
			CursorManager.removeBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.INSERT, handleInsertImportedTemplate);
			modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
			this.refresh(evt);
		}
		
		/**
		 * New experiments
		 */
		private function newExperiment():void {			
			newExperimentPopup = PopUpManager.createPopUp(this, NewKefedExperimentDialog, true) as NewKefedExperimentDialog;
		    newExperimentPopup.title = "Add New KEfED Experiment...";
			newExperimentPopup.templateList = this.templateList;
		    if (templateGrid != null) {
		    	newExperimentPopup.Type.selectedIndex = templateGrid.selectedIndex;
			    if (templateGrid.selectedIndex != -1) { // If a template is selected, use it to pre-populate the menu.
		    		newExperimentPopup.setFieldsForType(this.templateList.getItemAt(templateGrid.selectedIndex));
		   		}
		   	}
			newExperimentPopup.addEventListener(CloseEvent.CLOSE, closeNewExperimentDialog);
			newExperimentPopup.OkButton.addEventListener(MouseEvent.CLICK, insertNewExperiment);
			newExperimentPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewExperimentDialog);
			mx.managers.PopUpManager.centerPopUp(newExperimentPopup);
		}
		
		private function insertNewExperiment(e:Event):void {
			if (newExperimentPopup.Name.text != null && newExperimentPopup.Name.text != "") {
				CursorManager.setBusyCursor();
				// BUG: Needs to copy the existing model that matches the
				//      selected type, and use that to store things here.
				var uid:String = newExperimentPopup.Type.selectedItem["uid"];
				modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleNewKefedExperiment);
				
				//modelStore.retrieveModel(uid);
				// TODO: THIS WILL NOT WORK. WE NEED TO CREATE A NEW EVENT FOR THIS.
				//var e1:TriggerRetrieveKefedModelEvent = new TriggerRetrieveKefedModelEvent(uid, true);
				///this.dispatchEvent(e1);
			}
		}
		
		private function closeNewExperimentDialog(e:Event):void {
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
		}
		
		private function handleNewKefedExperiment (e:ModelStoreEvent):void {
			trace("Copy model for new experiment handler",e," model=",e.model);
			var exp:KefedExperiment = new KefedExperiment(e.model,true);
			exp.id = null;
			exp.modelName = newExperimentPopup.Name.text;
			exp.source = newExperimentPopup.Source.text;
			exp.citeKey = newExperimentPopup.Citation.text;
			exp.description = newExperimentPopup.Description.text;
			exp.designUid = e.model.uid;
//			exp.reference = newExperimentPopup.Reference.text;
//			exp.caseId = newExperimentPopup.CaseId;
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleNewKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			
			dataStore.insertData(exp);  // Assigns new id.
			selectLastExperiment = true;
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
		}
	
		
		private function handleInsertKefedExperiment(e:DataStoreEvent):void {
			trace("Insert Experiment Handler");
			dataStore.listData();
		}
		

		/**
		 * Delete an Experiment
		 */
		private function deleteExperiment():void {	
			
			deletePopup = ConfirmDeleteDialog(
					PopUpManager.createPopUp(this, ConfirmDeleteDialog, true));
					
			deletePopup.addEventListener("close", cancelDeleteExperiment);
            deletePopup["cancelButton"].addEventListener("click", cancelDeleteExperiment);   
            deletePopup["okButton"].addEventListener("click", confirmDeleteExperiment); 
			mx.managers.PopUpManager.centerPopUp(deletePopup);		
			
		}

		private function confirmDeleteExperiment(event:MouseEvent):void {	
			var i:int = experimentGrid.selectedIndex;
			var o:Object = experimentList[i];
			var uid:String = o.uid;
			cursorManager.setBusyCursor();
			dataStore.deleteData(uid);
			PopUpManager.removePopUp(deletePopup);
		}

		private function cancelDeleteExperiment(event:MouseEvent):void {	
			PopUpManager.removePopUp(deletePopup);
		}

		private function handleDeleteKefedExperiment(e:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			refresh();
		}

		private function handleListKefedExperiments(e:DataStoreEvent):void {
//			trace("Handle List Experiments");
			CursorManager.removeBusyCursor();
			this.experimentList = e.experimentList;
			if (this.experimentList.length == 1) {
				this.experimentCountText = "1 experiment";
			} else {
				this.experimentCountText = this.experimentList.length + " experiments";
			}
			if (selectLastExperiment) {
				experimentGrid.selectedIndex = this.experimentList.length - 1;
				experimentGrid.scrollToIndex(experimentGrid.selectedIndex);
				selectLastExperiment = false;
			}
			handleExperimentChange(e);
		}
		
		/** 
		 * Copy an Experiment
		 */
		private function copyExperiment():void {
			// Copy an experiment by reading it in, and then using the handler to
			// make a clone and insert it into the store.
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedExperiment);
			
			//modelStore.retrieveModel(uid);
			var e1:TriggerRetrieveKefedModelEvent = new TriggerRetrieveKefedModelEvent(uid, true);
			this.dispatchEvent(e1);
	
		}
		
		private function handleCopyKefedExperiment (e:ModelStoreEvent):void {
			trace("Copy template handler",e," model=",e.model);
			var exp:KefedExperiment = KefedExperiment(e.model.clone());
			exp.modelName = experiment.modelName + " copy";
			exp.updateUID();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			dataStore.insertData(exp);
			selectLastExperiment = true;
		}

		/**
		 * Edit an Experiment
		 */
		private function editExperiment():void {
			var i:int = experimentGrid.selectedIndex;
			
			// Sometimes a double click will be registered in response to
			// double clicks with a modifier key down.
			// cause a selection on the first click, followed by a de-selection
			// on the second click. 
			// Also, double clicks for sorting in the headers also trigger 
			// the double-click linked editing function.
			// So we make sure that we really have a 
			// selected item before we actually try to get it.  - tar
			if (i > -1) {
				cursorManager.setBusyCursor();
				var o:Object = experimentList[i];
				var uid:String = o.uid;
				dataStore.retrieveData(uid);
			}
		}
		
		private function handleLoadKefedExperiment(e:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			this.experiment = e.experiment;
			
			this.kefedComp.currentState = "ExperimentData_State";
			this.kefedComp.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.EDIT_DATA, this.experiment);
			
		}
		
		/**
		 * Save an Experiment
		 */
		
		private function saveEditedExperiment(e:Event):void {
			cursorManager.setBusyCursor();
			this.experiment.updateTime();
			dataStore.saveData(this.experiment);
		}

		private function handleSaveKefedExperiment(event:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			this.refresh();
		}
		
		/** 
		 * Import or Export experiments
		 */

		private function exportExperiment(e:Event):void {
			var i:int = experimentGrid.selectedIndex;
			if (i > -1) {
				var o:Object = experimentList[i];
				var uid:String = o.uid;
				CursorManager.setBusyCursor();
				dataStore.removeEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
				dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleExportKefedExperiment);
				dataStore.retrieveData(uid);
				exportExperimentButton.enabled = false;
			}
		}
		
		private function handleExportKefedExperiment (e:DataStoreEvent):void {
			trace("Export template handler",e," model=",e.experiment);
			CursorManager.removeBusyCursor();
			dataStore.removeEventListener(DataStoreEvent.RETRIEVE, handleExportKefedExperiment);
			dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			this.experiment = e.experiment;
			newExperimentPopup = PopUpManager.createPopUp(this, NewKefedExperimentDialog, true) as NewKefedExperimentDialog;
			newExperimentPopup.title = "Export this experiment";
			newExperimentPopup.editable = false;
			newExperimentPopup.TypeFieldList.visible = false;
			newExperimentPopup.TypeFieldItem.visible = true;
			newExperimentPopup.TypeField.text = experiment.type;
			newExperimentPopup.Name.text = experiment.modelName;
			newExperimentPopup.Source.text = experiment.source;
			newExperimentPopup.Citation.text = experiment.citeKey;
			newExperimentPopup.Description.text = experiment.description;
			newExperimentPopup.addEventListener(CloseEvent.CLOSE, closeNewExperimentDialog);
			newExperimentPopup.OkButton.addEventListener(MouseEvent.CLICK, exportCurrentExperiment);
			newExperimentPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewExperimentDialog);
			mx.managers.PopUpManager.centerPopUp(newExperimentPopup);			
		}
		
		private function exportCurrentExperiment (evt:Event):void {
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
			exportFileRef = new FileReference();
			exportFileRef.addEventListener(Event.COMPLETE, exportExperimentCompleted);
			exportFileRef.addEventListener(Event.CANCEL, exportExperimentCanceled);
			var defaultFilename:String = experiment.modelName.replace(/ /g, "-") + ".json";
			exportFileRef.save(JSONSerializer.serializeKefedExperiment(experiment,false), defaultFilename);
		}
		
		
		private function exportExperimentCompleted(evt:Event):void {
			exportExperimentButton.enabled = true;
			exportFileRef = null; // Release resources
		}
		
		private function exportExperimentCanceled(evt:Event):void {
			exportExperimentButton.enabled = true;
			exportFileRef = null; // Release resources
		}
		
		private function importExperiment(e:Event):void {
			importFileRef = new FileReference();
			importFileRef.addEventListener(Event.SELECT, importFileSelected);
			importFileRef.addEventListener(Event.COMPLETE, importExperimentLoadCompleted)
			importFileRef.addEventListener(FaultEvent.FAULT, callError);
			importFileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			try {
				importFileRef.browse([new FileFilter("JSON Files", "*.json;*.txt")]);
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}
		
		private function importExperimentLoadCompleted(evt:Event):void {
			// trace("File size = " + fileRef.data.length);
			try {
				var jsonText:String = importFileRef.data.readMultiByte(importFileRef.data.length, "iso-8859-1");
				var e:KefedExperiment = JSONSerializer.deserializeKefedExperiment(jsonText);
				e.updateUID();
				dataStore.removeEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
				dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertImportedExperiment);
				CursorManager.setBusyCursor();
				
				var e1:TriggerInsertKefedDataEvent = new TriggerInsertKefedDataEvent(e, true);
				this.dispatchEvent(e1);
				
				//dataStore.insertData(e);
				
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
			
			importFileRef=null; // To free data storage.
		}
		
		
		private function handleInsertImportedExperiment(evt:Event):void {
			CursorManager.removeBusyCursor();
			dataStore.removeEventListener(DataStoreEvent.INSERT, handleInsertImportedExperiment);
			dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
			this.refresh(evt);
		}
		
		/**
		 * Miscellaneous
		 */


		private function callError(e:FaultEvent):void {
			cursorManager.removeBusyCursor();
			Alert.show(UiUtil.getFaultURL(e) + "\n" + e.message.toString());
		}
		
		public function errorHandler(event:Event):void {
			Alert.show("IO Error: " + event, "Error");
		}
		
		public function returnToDashboard(event:KefedAppEvent):void {
			this.kefedComp.currentState = "Dashboard_State";
		}
		
		private function batchUpload(): void {
		
			this.kefedComp.currentState = "Batch_State";

		}

		private function updateSelectedList():void {
	  	
	  		var l:Array = list.selectedItems;
			this.kefedComp.selectedOntologies = l;

			var s:String = this.kefedComp.getOntologyList();
			selectedOntologiesLabel.text = s;
	  	}

    	]]>
    </mx:Script>

	<mx:Panel title="Ontology List" width="0%" height="100%">
			
		<mx:VBox width="100%" height="100%" 
					paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
											
			<grid:CheckBoxList width="100%" height="100%" id="list" 
							initialize="list.dataProvider=ontologyList" 
							dataProvider="{ontologyList}" 
							labelField="fullName" 
							itemRenderer="edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer" 
							showDataTips="true"
							dataTipField="description"
							allowMultipleSelection="true" change="updateSelectedList()" />
	
			<mx:TextArea id="selectedOntologiesLabel" text="All" editable="false" borderVisible="false"/>
				
		</mx:VBox>
		
	</mx:Panel>	

	<mx:Accordion height="100%" width="100%">

		<mx:Panel label="Credits" height="100%" width="100%">
		  <ui1:CreditBox componentName="BioScholar Application"/>
		</mx:Panel>
	    <!-- Future expansion, when interactions between panels are worked out.
	    		<ui:ModelDesignPanel label="Experimental Designs" id="modelPanel" width="100%" height="100%"
 			modelStore="{modelStore}" schemaStore="{schemaStore}"
 			deleteAllowed="{deleteAllowed}" createAllowed="{createAllowed}" editAllowed="{editAllowed}"/>
          -->
		<mx:Panel label="Experimental Designs" width="100%" height="100%">
						
			<mx:DataGrid id="templateGrid" 
							dataProvider="{templateList}" 
							width="100%" 
							height="100%" 
							editable="false" 
							doubleClickEnabled="true"
							doubleClick="editTemplate();"
							change="handleTemplateChange(event);">
				<mx:columns>
					<mx:DataGridColumn headerText="Design Name" dataField="modelName" />
					<mx:DataGridColumn headerText="Source" dataField="source" />
					<mx:DataGridColumn headerText="Date" dataField="dateTime" />
				</mx:columns>
				
			</mx:DataGrid>
	
		    <mx:ControlBar width="100%">
		    	<mx:Label id="designCount" text="{designCountText}"/>
	            <mx:Spacer width="100%"/>
	            <mx:Button id="newDesignButton" label="New Design" click="newTemplate();"/>
	            <mx:Button id="copyDesignButton" label="Copy Design" click="copyTemplate();" enabled="false"/>
	            <mx:Button id="editDesignButton" label="Edit Design" click="editTemplate();" enabled="false"/>
	            <mx:Button id="deleteDesignButton" label="Delete Design" click="deleteTemplate();" enabled="false"/>
				<mx:Spacer width="15"/>
				<mx:Button id="importDesignButton" label="Import Design" click="importTemplate(event);" enabled="true"
						   toolTip="New design imported from a local file."/>
				<mx:Button id="exportDesignButton" label="Export Design" click="exportTemplate(event);" enabled="false"
						   toolTip="Export selected design to a local file."/>
	        </mx:ControlBar>
	
		</mx:Panel>
		
		<mx:Panel label="Observations" width="100%" height="100%">
			
			<mx:DataGrid id="experimentGrid" 
							dataProvider="{experimentList}" 
							width="100%" 
							height="100%" 
							editable="false"
							doubleClickEnabled="true"
							doubleClick="editExperiment();"
							change="handleExperimentChange(event);" >
				<mx:columns>
					<mx:DataGridColumn headerText="Experimental Design" dataField="type" />
					<mx:DataGridColumn headerText="Experimental Label" dataField="modelName" />
					<mx:DataGridColumn headerText="Source" dataField="source" />
					<mx:DataGridColumn headerText="Date / Time" dataField="dateTime" />
				</mx:columns>
				
			</mx:DataGrid>
	
		    <mx:ControlBar width="100%">
		    	<mx:Label id="experimentCount" text="{experimentCountText}"/>
	            <mx:Spacer width="100%"/>
	            <mx:Button id="newExperimentButton" label="New Experiment" click="newExperiment();"/>
	            <mx:Button id="copyExperimentButton" label="Copy Experiment" click="copyExperiment();" enabled="false"/>
	            <mx:Button id="editExperimentButton" label="Edit Experiment" click="editExperiment();" enabled="false"/>
	            <mx:Button id="deleteExperimentButton" label="Delete Experiment" click="deleteExperiment();" enabled="false"/>
				<mx:Spacer width="15"/>
				<mx:Button id="importExperimentButton" label="Import Experiment" click="importExperiment(event);" enabled="true"
						   toolTip="New experiment imported from a local file."/>
				<mx:Button id="exportExperimentButton" label="Export Experiment" click="exportExperiment(event);" enabled="false"
						   toolTip="Export selected experiment to a local file."/>
	        </mx:ControlBar>
	
		</mx:Panel>
	</mx:Accordion>
	
</mx:HDividedBox>
