<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: OntologyTermLookupDialog.mxml 2490 2011-06-15 23:55:41Z tom $ 
     $Date: 2011-06-15 16:55:41 -0700 (Wed, 15 Jun 2011) $
     $Revision: 2490 $ -->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:grid="edu.isi.bmkeg.utils.CheckBoxDataGrid.*" 
	layout="absolute" width="640" height="480" initialize="init()"
	title="Ontology Term Lookup" showCloseButton="true" 
	close="closeWindow(event)">
	<mx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.component.KefedComponent;
			import edu.isi.bmkeg.kefed.component.view.elements.IKefedNamedObject;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedObject;
			import edu.isi.bmkeg.kefed.component.view.ontology.OntologySearchEvent;
			import edu.isi.bmkeg.kefed.component.view.ontology.OntologySearchInterface;
			import edu.isi.bmkeg.kefed.component.view.ontology.OntologyTermReference;
			import edu.isi.bmkeg.kefed.component.view.ui.SimpleInputWindow;
			import edu.isi.bmkeg.kefed.component.view.ui.UiUtil;
			import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private static var exactControlDefault:Boolean = false;
			private static var propControlDefault:Boolean = false;
			
			[Bindable]
			public var termLookupService:OntologySearchInterface = null;

			[Bindable]
			private var exact:Boolean = false; 

			[Bindable]
			private var prop:Boolean = false; 

			[Bindable]
			private var kefedObj:IKefedNamedObject;
			
			[Bindable]
			private var currentSearchTerm:String = "";
			
			[Bindable]
			private var currentSearchResults:ArrayCollection = new ArrayCollection();
			
			private var startTime:uint = 0;
			
			
			/** Create and popup a dialog for searching for ontology terms and 
			 *  updating the ontologyIds slot of the subject.  The initial search
			 *  term will be set to the nameValue of the subject.  The dialog
			 *  will handle updating ontologyIds by adding or setting the Ids
			 *  based on the search results and the existing values.
			 * 
			 * @param parent The parent object for the dialog.
			 * @param subject The KefedNamedObject that is being processe
			 * @param lookupService The service to use for term lookup.
			 */
			public static function showDialog(parent:DisplayObject,
											  subject:IKefedNamedObject,
											  lookupService:OntologySearchInterface):void {
				var dialog:OntologyTermLookupDialog = PopUpManager.createPopUp(parent,
		  																	   OntologyTermLookupDialog,
		  																	   true) as OntologyTermLookupDialog;
		  		dialog.kefedObj = subject;
		  		dialog.currentSearchTerm = subject.nameValue;
		  		dialog.termLookupService = lookupService;
		  		dialog.addEventListeners();
		  		dialog.resultsPanel.visible = false;
		  		dialog.exactControl.selectedValue = exactControlDefault;
		  		dialog.propControl.selected = propControlDefault;
				PopUpManager.centerPopUp(dialog);
			}
			
			private function init():void {
				searchInput.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
				
				var kefedComp:KefedComponent = KefedComponent(FlexGlobals.topLevelApplication.kefedComponent);
				ontologyListLabel.text = kefedComp.getOntologyList();

			}
			
			private function addEventListeners():void {
				termLookupService.addEventListener(OntologySearchEvent.FIND_ONTOLOGY_TERMS, searchResultEventHandler);
				termLookupService.addEventListener(FaultEvent.FAULT, FaultEventHandler);	
			}

			private function removeEventListeners():void {
				termLookupService.removeEventListener(OntologySearchEvent.FIND_ONTOLOGY_TERMS, searchResultEventHandler);
				termLookupService.removeEventListener(FaultEvent.FAULT, FaultEventHandler);
			}
			
			private function keyHandler(event:KeyboardEvent):void {
    			if (event.keyCode == Keyboard.ENTER) {
       				searchButtonClick();
     			}
   			}
			
			private function changeExactControl():void {
				exactControlDefault = Boolean(this.exactControl.selectedValue);
			}
			
			private function changePropControl():void {
				propControlDefault = this.propControl.selected;
			}
			
			private function searchButtonClick():void {
				exact = Boolean(this.exactControl.selectedValue);
				prop = this.propControl.selected;
				currentSearchTerm = searchInput.text;
				searchButton.label = "Searching...";
				searchButton.enabled = false;
				resultsPanel.visible = false;
				searchCount.text = "Searching...";
				searchTime.text = "";
				startTime = getTimer();
				termLookupService.search(currentSearchTerm, exact, prop, kefedObj);
			}		

			private function cancelButton():void {
				termLookupService.cancel()
				removeEventListeners();
				mx.managers.PopUpManager.removePopUp(this);
			}
						
			private function closeWindow(event:CloseEvent):void {
				cancelButton();
	        }
	        
	        private function processData(doAdd:Boolean):void {
	        	var res:ArrayCollection = new ArrayCollection();	    	
	        	for each( var i:Object in dg.selectedItems) {
	        		var item:OntologyTermReference = OntologyTermReference.create(i.ontologyId,
	        																	  i.ontologyDisplayName,
												      	  					      i.termId,
												          					      i.displayName,
												          					      i.shortName,
												          					      i.description);
//					item.termURL = i.url;
					res.addItem(item);
	        	}
	        	if (doAdd) {
	        		addTermOntologyIds(res);
	        	} else {
	        		setTermOntologyIds(res);
	        	}
	        	removeEventListeners();
				mx.managers.PopUpManager.removePopUp(this);
	        }
	        
			/** Set the ontologyIds field to be the results of the search.
		     *   Existing values will be replaced.
		     * 
		     * @param results The search results
		     */
		    private function setTermOntologyIds(results:ArrayCollection):void {
		       	this.kefedObj.ontologyIds = results;
		    }
		    
		    /** Add the results of the search to the the ontologyIds field,
		     *  keeping any existing values.
		     *  Will update any existing matching string values to new items.
		     * 
		     * @param event The event containing the search results.
		     */
		    private function addTermOntologyIds(results:ArrayCollection):void {
		      	for each (var id:Object in results) {
		      		var found:Boolean = false;
		      		var toRemove:Object = null;
		      		// Look for a matching object. 
		      		// If the matching object is a string, set the toRemove variable
		      		// so we can replace it with an OntologyReference object.  This is
		      		// used to update older stored ontology links.
		      		for each (var existingId:Object in kefedObj.ontologyIds) {
		      			if ((id as OntologyTermReference).matches(existingId)) {
		      				found = true;
		      				if (existingId is String) toRemove = existingId;
		      				break;
		      			}
		      		}
		      		if (!found) {
		    			kefedObj.ontologyIds.addItem(id);
		    		} else if (toRemove != null) { // Update string to Ontology Reference
		    		    kefedObj.ontologyIds.removeItemAt(kefedObj.ontologyIds.getItemIndex(toRemove));
		    		    kefedObj.ontologyIds.addItem(id);
		    		}
		    	}
		    }

			private function searchResultEventHandler(event:OntologySearchEvent):void {
			
              	currentSearchResults = event.searchResults;
 	            for each (var j:Object in currentSearchResults) {
    	        	// j.url = "";
    	        	j.selected = isCurrentOntologyItem(j);
        	    }
  				
				// need to make sure that the active terms are selected
				var a:Array = new Array();
				for( var i:int=0; i<currentSearchResults.length; i++) {
					if(currentSearchResults[i].selected) {
						a.push(i);
					}
				}
				dg.selectedIndices = a;
				var stopTime:uint = getTimer();
				var nResults:int = currentSearchResults.length;
				searchCount.text = nResults + " match" + (nResults == 1 ? "" : "es");
				searchTime.text = elapsedTimeFormatter.format((stopTime - startTime) / 1000.0) + "s";
				updateTermListLabel();
				resultsPanel.visible = true;
				searchButton.label = "Search";
				searchButton.enabled = true;
	  		}
	  		
	  		// Check if the search item is currently an ontologyId of
	  		// the kefedObject.
	        // NOTE:  This is currently done by just using the
	        //  termId field, which is not guaranteed unique
	        //  across ontologies.  It should really be the
	        //  combination of the ontology name and term id.
	  		private function isCurrentOntologyItem(item:Object):Boolean {
	  			for each (var i:Object in kefedObj.ontologyIds) {
	            	// Backward compatibility.  Be prepared for just a string.
	            	if (i is OntologyTermReference) {
	            		if (item.termId == i.termId) return true;
	            	} else {
	            		if (item.termId == i) return true;
	            	}
	            }
	            return false;
	  		}
	  		
			private function updateTermListLabel():void {
				var s:String = "";
				for( var i:int=0; i<dg.selectedItems.length; i++) {
					if(i>0)
						s += ", ";
					s += dg.selectedItems[i].shortName; // or termId?
				}
				
				termListLabel.text = s;
			}
	    	
			private function FaultEventHandler(event:FaultEvent):void {
				searchButton.label = "Search";
				searchButton.enabled = true;
				Alert.show(UiUtil.getFaultURL(event) + "\n" + event.message.toString());
			}
			

		]]>
	</mx:Script>
	<mx:NumberFormatter id="elapsedTimeFormatter" precision="1"/>

	<mx:VDividedBox width="100%" height="100%">
		
		<mx:Panel title="Search Ontologies" width="100%" height="45%">
			
			<mx:VBox width="100%" height="100%" 
					paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
				
						<mx:RadioButtonGroup id="exactControl" selectedValue="{exact}" change="changeExactControl();"/>
						<mx:HBox width="100%" height="100%">
							<mx:TextInput id="searchInput" text="{currentSearchTerm}" width="30%"/>
							<mx:Button id="searchButton" label="Search" click="searchButtonClick();"/>
						 	<mx:RadioButton label="contains" value="false" group="{exactControl}"/>
							<mx:RadioButton label="exact match" value="true" group="{exactControl}"/>
							<mx:CheckBox id="propControl" label="Search Definitions?"
								change="changePropControl();"/>
						</mx:HBox>
						
						<mx:TextArea id="ontologyListLabel" width="100%" borderVisible="false"/>
										
			</mx:VBox>
			
		</mx:Panel>
		
		<mx:Panel id="resultsPanel" title="Terminology" width="100%" height="100%" visible="false">
		
			<grid:CheckBoxDataGrid id="dg" dataProvider="{currentSearchResults}" width="100%" height="100%" editable="false"
						variableRowHeight="true" wordWrap="true"
						allowMultipleSelection="true" change="updateTermListLabel();">
				<grid:columns>
					<mx:DataGridColumn dataField="termId" headerText=" " width="20" sortable="true" editable="false"
						itemRenderer="edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer" /> 
					<mx:DataGridColumn dataField="htmlDisplayName" headerText="Preferred Name"
									   editable="false" showDataTips="false">
						<mx:itemRenderer>
							<mx:Component>
							    <!-- This works to show html text, but generates "unable to bind" warnings on Object. -->
								<mx:Text x="0" y="0" width="100%" htmlText="{data.htmlDisplayName}"/>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn dataField="htmlDescription" headerText="Description"
									   editable="false" showDataTips="false">
						<mx:itemRenderer>
							<mx:Component>
							    <!-- This works to show html text, but generates "unable to bind" warnings on Object. -->
								<mx:Text x="0" y="0" width="100%" htmlText="{data.htmlDescription}"/>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<!-- TODO: Consider making these be datatip values in the name column. -->
					<mx:DataGridColumn dataField="ontologyDisplayName" headerText="Ontology Name"
									   editable="false" showDataTips="true"/>
					<mx:DataGridColumn dataField="termId" headerText="Term Id"
									   editable="false" showDataTips="true"/>
				</grid:columns>
			</grid:CheckBoxDataGrid>
		
			<mx:HBox width="100%" 					
				paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
				<mx:VBox width="100%">
					<mx:HBox width="100%">
						<mx:Label id="searchCount" color="black" text=""/>
						<mx:Label id="searchTime" color="gray" text=""/>
						<mx:Spacer width="100%"/>
						<mx:Button label="Set" click="processData(false);"/>
						<mx:Button label="Add" click="processData(true);"/>
						<mx:Button label="Cancel" click="cancelButton();"/>
					</mx:HBox>				
					<mx:TextArea id="termListLabel" width="100%" borderVisible="false"/>
				</mx:VBox>
			</mx:HBox>	 
		
		</mx:Panel>
		
			
	</mx:VDividedBox>
</mx:TitleWindow>
