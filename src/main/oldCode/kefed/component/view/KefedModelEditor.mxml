<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: KefedModelEditor.mxml 38 2011-03-18 05:41:28Z taruss2000@gmail.com $ 
     $Date: 2011-03-17 22:41:28 -0700 (Thu, 17 Mar 2011) $
     $Revision: 38 $ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="edu.isi.bmkeg.kefed.component.view.ui.*"
	width="100%" height="100%" 
    paddingTop="2" paddingBottom="2" 
    paddingLeft="2" paddingRight="2"
	preinitialize="DiagramMappings.initializeMappings();"
	initialize="init();" 
	creationComplete="processRequest()"
	viewSourceURL="srcview/index.html">
    
    <mx:XML id="configuration" source="/edu/isi/bmkeg/kefed/component/configuration.xml"/>
    <mx:XML xmlns="" id="svglib" source="/edu/isi/bmkeg/kefed/component/view/ui/kapit/kefed.svg"/>
    <mx:Model id="license" source="/edu/isi/bmkeg/kefed/component/licenses.xml"/>
 
    <mx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.component.view.ui.UiUtil;
			import flash.net.navigateToURL;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.BrowserManager;
			import mx.managers.CursorManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.utils.URLUtil;

			import edu.isi.bmkeg.kefed.component.view.app.KefedAppEvent;
			import edu.isi.bmkeg.kefed.component.view.app.KefedAppEventDispatcher;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedModel;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedObject;          
			import edu.isi.bmkeg.kefed.component.view.ui.kapit.DiagramMappings;
			import edu.isi.bmkeg.utils.Parameters;
			import edu.isi.bmkeg.kefed.component.view.store.IDataStore;
			import edu.isi.bmkeg.kefed.component.view.store.IModelStore;
			import edu.isi.bmkeg.kefed.component.view.store.ModelStoreEvent;
			import edu.isi.bmkeg.kefed.component.view.store.json.YogoSerializer;
			import edu.isi.bmkeg.kefed.component.view.store.persevere.PersevereDataStore;
			import edu.isi.bmkeg.kefed.component.view.store.persevere.PersevereModelStore;
			import edu.isi.bmkeg.kefed.component.view.store.persevere.YogoModelStore;
			import edu.isi.bmkeg.kefed.component.view.ui.ConfirmDeleteDialog;
			import edu.isi.bmkeg.kefed.component.view.ui.NewKefedTemplateDialog;

			import edu.isi.bmkeg.kefed.component.view.ontology.OntologySearchEvent;
			import edu.isi.bmkeg.kefed.component.view.ontology.bioportal.NCBOBioPortalInterface;

		
			[Bindable]
			public var serverUrl:String;
			
			[Bindable]
			public var modelStore:IModelStore = null;
			
			[Bindable]
			public var schemaStore:IModelStore = null;
			
			[Bindable]
			public var dataStore:IDataStore = null;
			
			[Bindable]
			public var errorMessage:String;

				          			
			public var config:Parameters;
			public var model:KefedModel;
			public var eventDispatcher:KefedAppEventDispatcher = new KefedAppEventDispatcher;
			public var ontologyList:ArrayCollection = new ArrayCollection();
			public var selectedOntologies:Array = new Array();

			
			private var deletePopup:ConfirmDeleteDialog;
			// TODO:  Unify naming.  This is a bit incoherent at the moment because
			//        the old nomenclature was Template and Model and the new names
			//        are Model and Experiment.
			private var newModelPopup:NewKefedTemplateDialog;
			
			private var version:String = "$Revision: 38 $";
			private var ncbo:NCBOBioPortalInterface = new NCBOBioPortalInterface(); 
			private var callbackUrl:String = null; // URL to invoke at end.
			private var callbackFunction:String = null; // JavaScript function to call at end.
			private var action:String = null;
			private var modelUid:String = null;
			private var schemaId:String = null;
			private var firstLoadCompleted:Boolean = false;
			
			[Bindable]
			private var zoom:Number = 1;

			private function init():void {
				UiUtil.agreeToLicense(license.key, license.license);
				if (serverUrl==null) {
					serverUrl = URLUtil.getProtocol(this.url) + "://"
				 	         + URLUtil.getServerNameWithPort(this.url) + "/";
				}
				trace(this.name + " serverURL = " + serverUrl);
				config = new Parameters(configuration);
				
				// Setup the URLs for the various persistent storage mechanisms.
				// Since the schemaStore is optional, it gets a null default value.
				var modelStoreUrl:String = config.getValue("modelStoreUrl", "persevere/KefedModel");
				var schemaStoreUrl:String = config.getValue("schemaStoreUrl", "persevere/crux__yogo_model");
				var dataStoreUrl:String = config.getValue("dataStoreUrl", "persevere/KefedModel");
				callbackUrl = config.getValue("callbackUrl", null);
				callbackFunction = config.getValue("callbackFunction", null);
				action = config.getValue("action", "createModel");
				modelUid = config.getValue("uid", null);
				zoom = Number(config.getValue("zoom", "1"));
				
				modelStoreUrl = URLUtil.getFullURL(serverUrl, modelStoreUrl);
				modelStore = new PersevereModelStore(modelStoreUrl);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleModelLoad);
				modelStore.addEventListener(ModelStoreEvent.INSERT, handleModelInsert);
				modelStore.addEventListener(ModelStoreEvent.SAVE, handleModelSave);
				modelStore.addEventListener(ModelStoreEvent.DELETE, handleModelDelete);
				modelStore.addEventListener(FaultEvent.FAULT, handleModelStoreFault);
							
				if (schemaStoreUrl != null) {
					schemaStoreUrl = URLUtil.getFullURL(serverUrl, schemaStoreUrl);
					schemaStore = new YogoModelStore(schemaStoreUrl);
					schemaStore.addEventListener(ModelStoreEvent.RETRIEVE, handleSchemaLoad);
					schemaStore.addEventListener(ModelStoreEvent.INSERT, handleSchemaInsert);
					schemaStore.addEventListener(FaultEvent.FAULT, handleSchemaStoreFault);
				}

				
				dataStoreUrl = URLUtil.getFullURL(serverUrl, dataStoreUrl);
				dataStore = new PersevereDataStore(dataStoreUrl);
				
				if(eventDispatcher != null ) {
					eventDispatcher.addEventListener(KefedAppEvent.SAVE_DESIGN_EDIT, saveEditedModel);
					eventDispatcher.addEventListener(KefedAppEvent.CANCEL_DESIGN_EDIT, cancelEditModel);
				}
				
				//  Setup up webservice for NCBO ontology lookup
				ncbo.addEventListener(OntologySearchEvent.LIST_ONTOLOGIES, ncboListOntologiesEventHandler);
				ncbo.addEventListener(FaultEvent.FAULT, FaultEventHandler);					
				ncbo.listOntologies();

				currentState = "";
				FlexGlobals.topLevelApplication.setFocus();
			}
			
			/* Carry out the function requested by the action
			 * parameter to this invocation of the editor.
			 */
			private function processRequest():void {
				trace("Received request " + action + " with uid=" + modelUid);
				firstLoadCompleted = false;
				if (action == "createModel") {
					newTemplate();
				} else if (modelUid != null) {
					cursorManager.setBusyCursor();
					modelStore.retrieveModel(modelUid);
					if (schemaStore != null) {
						schemaStore.retrieveModel(modelUid);
					}
				} else {
					errorMessage = "Received action " + action + " without a UID."
					trace(errorMessage);
					doErrorCallback(callbackUrl, "IllegalArgument", errorMessage); 
				}
			}
			
			private function ncboListOntologiesEventHandler(event:OntologySearchEvent):void {			
                this.ontologyList = event.searchResults;
                this.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.ONTOLOGY_LIST_LOADED);
	  		}
	  		
	  		private function handleModelStoreFault(event:FaultEvent):void {
	  			errorMessage = "ModelStore: " + event.message.toString();
	  			trace(errorMessage);
	  			Alert.show(errorMessage);
	  		}	

	  		private function handleSchemaStoreFault(event:FaultEvent):void {
	  			errorMessage = "SchemaStore: " + event.message.toString();
	  			trace(errorMessage);
	  			Alert.show(errorMessage);
	  		}	

			
			private function FaultEventHandler(event:FaultEvent):void {
				errorMessage = event.message.toString();
				trace(errorMessage);
				Alert.show(errorMessage);				
			}
			
			
			public function getOntologyList():String {
				var separator:String = "";
				var s:String = "All";
				if (selectedOntologies.length > 0) {
					s = "";
					for (var ontology:Object in selectedOntologies) {
						s += separator + ontology.abbreviation;
						separator = ", ";
					}
				}
				return s;
			}
			
		/** 
		 *   Handle loading of model and dispathc to the appropriate
		 *   action for create, edit or delete
		 */
		private function handleModelLoad(e:ModelStoreEvent):void {
			cursorManager.removeBusyCursor();
			try {
				trace("Model loaded: " + e.model + " modelName=" + ((e.model == null) ? "" : e.model.modelName));
				if (e.model == null) {
					errorMessage = "Couldn't find model with uid " + modelUid;
					trace(errorMessage);
					Alert.show(errorMessage);
					doErrorCallback(callbackUrl, "ModelNotFound", "Model " + modelUid + " not found.");
				} else if (action == "editModel" || action == "createModel") {
					this.model = e.model;
					editTemplate();
				} else if (action == "copyModel") {
					if (firstLoadCompleted) {
						this.model = e.model;
						editTemplate();
					} else {
						cursorManager.setBusyCursor();
						this.model = e.model;
						this.model.updateUID();
						this.model.updateTime();
						modelUid = this.model.uid;
						modelStore.insertModel(model);
						if (schemaStore != null) {
							// This does not necessarily have the same id number.
							schemaStore.insertModel(model);
						}
					}
				} else if (action == "deleteModel") {
					this.model = e.model;
					deleteTemplate();
				} else { // Don't know what to do!
					errorMessage = "Got action " + action + " that we don't know how to handle!";
					trace(errorMessage);
					Alert.show(errorMessage);
					doErrorCallback(callbackUrl, "IllegalArgument", errorMessage); 
				}
			} finally { // Just in case something goes wrong, we always want this set.
				firstLoadCompleted = true;
			}
		}
		
		private function handleSchemaLoad(e:ModelStoreEvent):void {
			if (e.model == null) {
				trace("Couldn't find schema with uid " + modelUid);
				Alert.show("Couldn't find a Yogo schema with uid " + modelUid + ".  A new one will be created.");
			} else {
				schemaId = e.model.id;
				trace("schemaId set to " + schemaId);
			}
		}
			
		/**
		 * New Templates
		 */
		private function newTemplate():void {			
			newModelPopup = PopUpManager.createPopUp(this, NewKefedTemplateDialog, true) as NewKefedTemplateDialog;
			newModelPopup.addEventListener(CloseEvent.CLOSE, closeNewTemplateDialog);
			newModelPopup.OkButton.addEventListener(MouseEvent.CLICK, insertNewTemplate);
			newModelPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewTemplateDialog);
			mx.managers.PopUpManager.centerPopUp(newModelPopup);
		}
		
		private function insertNewTemplate(e:Event):void {
			if (newModelPopup.Name.text != null && newModelPopup.Name.text != "") {
				CursorManager.setBusyCursor();
				var model:KefedModel = new KefedModel();
				model.type = "template";
				model.modelName = newModelPopup.Name.text;
				model.source = newModelPopup.Source.text;
				model.description = newModelPopup.Description.text;
				model.updateTime();
				if (modelUid != null) {
					model.uid = modelUid;
				} else {
					modelUid = model.uid;
				}
				modelStore.insertModel(model);
				if (schemaStore != null) {
					// This does not necessarily have the same id number.
					schemaStore.insertModel(model);
				}
				currentState="";
			}
			mx.managers.PopUpManager.removePopUp(newModelPopup);
		}
		
		private function handleModelInsert(e:ModelStoreEvent):void {
			trace("Insertion done, now bringing up for edit.");
			loadAndEditTemplate();
		}
		
		private function handleSchemaInsert(e:ModelStoreEvent):void {
			trace("Schema insertion done.");
		}
		
		private function closeNewTemplateDialog(e:Event):void {
			mx.managers.PopUpManager.removePopUp(newModelPopup);
			doCallback(callbackUrl, "canceled");
		}		
		
		/**
		 * Delete a Template
		 */
		private function deleteTemplate():void {	
			
			deletePopup = ConfirmDeleteDialog(
					PopUpManager.createPopUp(this, ConfirmDeleteDialog, true));
			
			deletePopup.message.text = "Are you sure you want to delete model " + model.modelName 
								   		+ "\n(uid=" + model.uid + ")?";
			deletePopup.addEventListener("close", cancelDeleteTemplate);
            deletePopup["cancelButton"].addEventListener("click", cancelDeleteTemplate);   
            deletePopup["okButton"].addEventListener("click", confirmDeleteTemplate); 
			mx.managers.PopUpManager.centerPopUp(deletePopup);		
			
		}

		private function confirmDeleteTemplate(event:MouseEvent):void {	
			cursorManager.setBusyCursor();
			modelStore.deleteModel(modelUid);
			if (schemaStore != null) {
				schemaStore.deleteModel(modelUid);
			}
			PopUpManager.removePopUp(deletePopup);
		}

		private function cancelDeleteTemplate(event:MouseEvent):void {	
			PopUpManager.removePopUp(deletePopup);
			doCallback(callbackUrl,"canceled");
		}

		private function handleModelDelete(e:ModelStoreEvent):void {
			cursorManager.removeBusyCursor();
			trace("Deletion completed");
			doCallback(callbackUrl,"success");
		}
		
		/**
		 * Edit a Template
		 */
		private function loadAndEditTemplate():void {
			// Load the template.  Edit will be done from the load event handler.
			modelStore.retrieveModel(modelUid);
			if (schemaStore != null) {
				schemaStore.retrieveModel(modelUid);
			}
			trace("Finished loading call",modelUid);
		}
		
		private function editTemplate():void {
			// Assumes that the model is already properly loaded into this.model.
			currentState = "Design_State";
			FlexGlobals.topLevelApplication.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.EDIT_DESIGN, this.model);
		}
		
		private function saveEditedModel(e:Event):void {
			CursorManager.setBusyCursor();
			this.model.diagramXML = designer.diagram.toXML();
			this.model.updateTime();
			trace("Saving model with id = " + this.model.id);
			modelStore.saveModel(this.model);
			if (schemaStore != null) {
				if (schemaId == null) {
					// Looks like it isn't present
					// TODO: Make sure we rule out a race condition.  Currently a potential bug!
					trace("No schema ID set, so inserting schema");
					schemaStore.insertModel(this.model);
				} else {
					this.model.id = schemaId;
					trace("Saving schema with id = " + this.model.id);
					schemaStore.saveModel(this.model);
					var yogo:String = YogoSerializer.serializeKefedModel(this.model, true);
				}
			}
		}
		
		private function handleModelSave(e:ModelStoreEvent):void {
			CursorManager.removeBusyCursor();
			trace("Model save completed.");
			// currentState = "";
			doCallback(callbackUrl, "success");
		}
		
		private function cancelEditModel(e:Event):void {
			trace("Edit canceled.");
			currentState = "";
			if (action == "createModel") { // Need to undo creation?
				doCallback(callbackUrl, "success");
			} else {
				doCallback(callbackUrl, "canceled");
			}
		}
		
		/** 
		 * Finished editing
		 */
		
      private function doErrorCallback(baseUrl:String, errorType:String, message:String):void {
      	doCallback(baseUrl, "error", {error:errorType, errorMessage:message});
      }
      
      /** Handles all of the callback actions, either calling back to a JavaScript
       *  function, to a URL or to both.  This will be determined by whether or 
       *  not callback functions or urls are null.
       * 
       *  Status, action and modelUid are reported automatically.  Any additional parameters
       *  can be passed with the parameters argument.
       *  
       * @param baseUrl The base URL for a URL callback.  May be null.
       * @param status The status to report as the value of the "status" key.
       * @param parameters Additional parameters as key:value entries on object.
       */
      private function doCallback(baseUrl:String, status:String, parameters:Object=null):void {
      	if (parameters == null) parameters = new Object();
      	 if (designer != null) {
            parameters.zoom = designer.zoomControl.value.toString();
       	 } else {
      		parameters.zoom = zoom.toString();
       	}
       	parameters.status = status;
       	parameters.action = action;
       	parameters.uid = modelUid;
		UiUtil.doCallback(callbackFunction, baseUrl, parameters);
  		Alert.show("Process completed.\n  action=" + action + "\n  status=" + status
      					 + "\n  model uid=" + modelUid + "\n  " + parameters);
      	// Should this call the exit function here?  
      }
		
		]]>
	</mx:Script>

	<mx:states>
	
		<mx:State name="Design_State">
			<mx:RemoveChild target="{information}"/>
			<mx:AddChild relativeTo="{top}">
				<ui:DesignerComponent label="Design" id="designer" height="100%" width="100%"
					zoomFactor="{zoom}"/>
			</mx:AddChild>	
		</mx:State>
   </mx:states>
   
   <mx:VBox id="top" height="100%" width="100%">
   	  <ui:CreditBox id="information" height="100%" width="100%"
   	  		 errorMessage="{errorMessage}"
	   	  	 componentName="Editor" additionalDeveloper1="Montana State University"/>
  </mx:VBox>
   
   <!--   <mx:LinkButton id="CloseApp" label="Close Application" click="UiUtil.closeApp();"/> -->
			
</mx:Application>
