<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:ui="edu.isi.bmkeg.kefed.component.view.ui.*"
		   xmlns:persevere="edu.isi.bmkeg.kefed.component.view.ui.persevere.*"
		   xmlns:pl="edu.isi.bmkeg.utils.powerloom.*"
		   xmlns:kapit="edu.isi.bmkeg.kefed.component.view.ui.kapit.*"
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   preinitialize="DiagramMappings.initializeMappings();"
		   initialize="init();"
		   width="400" height="300">
    
	<fx:Declarations>
		<fx:XML id="configuration" source="configuration.xml"/>
		<fx:Model id="license" source="licenses.xml"/>
	</fx:Declarations>
		
	<mx:states>
		<s:State name="Dashboard_State"/>
		<s:State name="Design_State"/>
		<s:State name="ExperimentData_State"/>
		<s:State name="PowerLoomForm"/>
	</mx:states>
	
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.kefed.component.view.ui.UiUtil;
			import mx.managers.IBrowserManager;
			import mx.managers.BrowserManager;
			import edu.isi.bmkeg.kefed.component.view.store.vpdmf.VpdmfModelStore;
			import edu.isi.bmkeg.kefed.component.view.store.vpdmf.VpdmfDataStore;
			import edu.isi.bmkeg.kefed.component.view.store.IDataStore;
			import edu.isi.bmkeg.kefed.component.view.store.IModelStore;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import mx.utils.URLUtil;
			
			import mx.core.IVisualElementContainer;
			import mx.core.FlexGlobals;
		
			import edu.isi.bmkeg.utils.Parameters;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedModel;
			import edu.isi.bmkeg.kefed.component.view.elements.KefedObject;
			import edu.isi.bmkeg.kefed.component.view.ui.kapit.DiagramMappings;    
        	import com.kapit.diagram.library.SVGAssetLibrary;
			import edu.isi.bmkeg.kefed.component.view.app.KefedAppEventDispatcher;
			import edu.isi.bmkeg.kefed.component.view.app.KefedAppEvent;

			import edu.isi.bmkeg.kefed.component.view.ontology.OntologySearchEvent;
			import edu.isi.bmkeg.kefed.component.view.ontology.bioportal.NCBOBioPortalInterface;
		
			// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// Added elements for RobotLegs.
			import org.robotlegs.core.IContext;
			import org.robotlegs.core.IInjector;
			import org.robotlegs.utilities.modular.core.IModule;
			import org.robotlegs.utilities.modular.core.IModuleContext;

			protected var context:IModuleContext;
			
			/**
			 * We need to initialize our context by setting the parent
			 * injector for the module. This is actually injected by the
			 * shell, so no need to worry about it!
			 */
			[Inject]
			public function set parentInjector(value:IInjector):void
			{
				context = new KefedComponentContext(this, value);
			}
			
			public function dispose():void
			{
				if(parent && parent.contains(this))
					IVisualElementContainer(parent).removeElement(this);
				context.dispose();
				context = null;    
			}	
			// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			[Bindable]
			public var serverUrl:String;
			
			[Bindable]
			public var modelStore:IModelStore = null;
			
			[Bindable]
			public var schemaStore:IModelStore = null;
			
			[Bindable]
			public var dataStore:IDataStore = null;
			
			[Bindable]
			private var jsonFormModelStore:IModelStore = null;
			
			[Bindable]
			private var jsonFormDataStore:IDataStore = null;
				          			
			public var config:Parameters;
			public var model:KefedModel;
			public var eventDispatcher:KefedAppEventDispatcher = new KefedAppEventDispatcher;
			public var lib:SVGAssetLibrary;
			
			private var version:String = "$Revision: 38 $";
			private var nbco:NCBOBioPortalInterface = new NCBOBioPortalInterface(); 
			public var ontologyList:ArrayCollection = new ArrayCollection();
			public var selectedOntologies:Array = new Array();

			private function init():void {
				UiUtil.agreeToLicense(license.key, license.license);
				/*if (serverUrl==null) {
					serverUrl = URLUtil.getProtocol(this.url) + "://"
				 	         + URLUtil.getServerNameWithPort(this.url) + "/";
				}
				trace(this.name + " serverURL = " + serverUrl);*/
				config = new Parameters(configuration);
				
				// Setup the URLs for the various persistent storage mechanisms.
				// Since the schemaStore is optional, it gets a null default value.
				var modelStoreUrl:String = config.getValue("modelStoreUrl", "persevere/KefedModel");
				var schemaStoreUrl:String = config.getValue("schemaStoreUrl", null);
				var dataStoreUrl:String = config.getValue("dataStoreUrl", "persevere/KefedModel");
				
				modelStoreUrl = URLUtil.getFullURL(serverUrl, modelStoreUrl);
				modelStore = new VpdmfModelStore(modelStoreUrl);
				//jsonFormModelStore = new KefedModelStore(modelStoreUrl);
				/*if (schemaStoreUrl != null) {
					schemaStoreUrl = URLUtil.getFullURL(serverUrl, schemaStoreUrl);
					schemaStore = new KefedModelStore(schemaStoreUrl);
				}*/
				dataStoreUrl = URLUtil.getFullURL(serverUrl, dataStoreUrl);
				dataStore = new VpdmfDataStore(dataStoreUrl);
				//jsonFormDataStore = new KefedDataStore(dataStoreUrl);

				//  Setup up webservice for NCBO ontology lookup
				//nbco.addEventListener(OntologySearchEvent.LIST_ONTOLOGIES, ncboListOntologiesEventHandler);
				//nbco.addEventListener(FaultEvent.FAULT, FaultEventHandler);					
				//nbco.ncboListOntologies();
				
				currentState = "Dashboard_State";
				FlexGlobals.topLevelApplication.setFocus();
			}
			
			private function ncboListOntologiesEventHandler(event:OntologySearchEvent):void {			
                this.ontologyList = event.searchResults;
                this.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.ONTOLOGY_LIST_LOADED);
	  		}	
			
			private function FaultEventHandler(event:FaultEvent):void {
				Alert.show(event.message.toString());				
			}
			
			public function getOntologyList():String {
				var separator:String = "";
				var s:String = "All";
				if (selectedOntologies.length > 0) {
					s = "";
					for each (var ontology:Object in selectedOntologies) {
						s += separator + ontology.abbreviation;
						separator = ", ";
					}
				}
				return s;
			}

		]]>
	</fx:Script>
	
	<ui:InventoryComponent
		includeIn="Dashboard_State"
		label="Dashboard" 
		id="inventory" 
		height="100%" width="100%"
		modelStore="{modelStore}" 
		dataStore="{dataStore}" 
		schemaStore="{schemaStore}"/>

	<ui:DesignerComponent 
		includeIn="Design_State"
		label="Design" 
		id="designer" 
		height="100%" 
		width="100%"/>
	
	<ui:SpreadsheetComponent 
		includeIn="ExperimentData_State"
		label="Data" 
		id="spreadsheet" 
		height="100%" 
		width="100%"/>
		
	<pl:PowerLoom 
		includeIn="PowerLoomForm"
		label="powerloom" 
		id="powerloom" 
		height="100%" 
		width="100%"/>
			
</mx:Module>
