<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:view="edu.isi.bmkeg.ooevv.view.*" 
		 xmlns:utils="edu.isi.bmkeg.utils.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 skinClass="edu.isi.bmkeg.ooevv.editor.view.OoevvElementListSkin"
		 width="100%"
		 height="100%">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Metadata>
		[SkinState("loading")]
		[SkinState("normal")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.ooevv.model.*;
			import edu.isi.bmkeg.ooevv.model.scale.*;
			import edu.isi.bmkeg.ooevv.events.*;
			import edu.isi.bmkeg.ooevv.editor.OoevvEditorContext;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElementContainer;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.states.SetStyle;
			import mx.states.State;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
		
			[Bindable]
			public var elements:ArrayCollection;
			
			public static const VIEW_MODE_LOADING:String="loading";
			public static const VIEW_MODE_NORMAL:String="normal";

			
			private var _viewMode:String = VIEW_MODE_NORMAL;
			
			protected function set viewMode(value:String):void
			{
				_viewMode = value;
				invalidateSkinState(); // this forces a call to getCurrentSkinState
			}
			
			public function turnOnLoadingIndicator():void
			{
				viewMode = VIEW_MODE_LOADING;
			}
			
			public function turnOffLoadingIndicator():void
			{
				viewMode = VIEW_MODE_NORMAL;
			}
			
			override protected function getCurrentSkinState():String
			{
				// this forces a change in skinstate
				return _viewMode;
			}
									
			protected function elList_selectionChangeHandler(event:GridSelectionEvent):void
			{

				if(this._viewMode != VIEW_MODE_NORMAL) {
					return;
				}
				// TODO Auto-generated method stub
				var i:int = elList.selectedIndex;
				if( i != -1 ) {
					var el:OoevvElement = OoevvElement(elements.getItemAt(i));
					var uid:Number = el.vpdmfId;
					this.dispatchEvent( new SelectOoevvElementEvent(uid) );
				}
			}
			
			private function ooevvElementLabelFunktion(item:Object, thisObject:Object):String {
				if( item.elementType != null ) {
					return item.elementType;
				} else {
					return "";
				}
			}
			
		]]>
	</fx:Script>
			
	<s:states>
		<s:State name="normal" />  
		<s:State name="disabled" />  
		
		<!-- modal state to disable control  -->
		<s:State name="loading"/>
	</s:states>
					
	<s:DataGrid id="elList" width="100%" height="100%"
					selectionChange="elList_selectionChangeHandler(event)"
	 				dataProvider="{elements}">
			
			<s:columns> 
				<s:ArrayList>
					<s:GridColumn labelFunction="ooevvElementLabelFunktion" headerText="Type"/> 
					<s:GridColumn dataField="vpdmfLabel" headerText="Name"/> 
				</s:ArrayList>
			</s:columns> 
		
	</s:DataGrid>
	
</s:Panel>
